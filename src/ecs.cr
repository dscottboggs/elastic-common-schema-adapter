require "json"
include JSON::Serializable
# The top-level of an ECS log entry.
struct ECS::LogEntry
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # @timestamp
  #
  # Date/time when the event originated.
  #
  # This is the date/time extracted from the event, typically representing when the
  # event was generated by the source.
  #
  # If the event source has no original timestamp, this value is typically populated
  # by the first time the event was received by the pipeline.
  #
  # Required field for all events.
  #
  # Level: Core
  # Type: Date
  # Example:
  # ```
  # 2016-05-23T08:05:34.853Z
  # ```
  @[JSON::Field(key: "@timestamp")]
  property timestamp : Time?

  # A chainable setter for timestamp
  def timestamp(new_value : Time)
    @timestamp = new_value
    self
  end

  # tags
  #
  # List of keywords used to tag each event.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # ["production", "env2"]
  # ```
  property tags : String?

  # A chainable setter for tags
  def tags(new_value : String)
    @tags = new_value
    self
  end

  # labels
  #
  # Custom key/value pairs.
  #
  # Can be used to add meta information to events. Should not contain nested
  # objects. All values are stored as keyword.
  #
  # Example: `docker` and `k8s` labels.
  #
  # Level: Core
  # Type: Object
  # Object Type: Keyword
  # Example:
  # ```
  # {"application": "foo-bar", "env": "production"}
  # ```
  property labels : Hash(String, String)?

  # A chainable setter for labels
  def labels(new_value : Hash(String, String))
    @labels = new_value
    self
  end

  # message
  #
  # For log events the message field contains the log message, optimized for viewing
  # in a log viewer.
  #
  # For structured logs without an original message field, other fields can be
  # concatenated to form a human-readable summary of the event.
  #
  # If multiple messages exist, they can be combined into one message.
  #
  # Level: Core
  # Type: Text
  # Example:
  # ```
  # Hello World
  # ```
  property message : String?

  # A chainable setter for message
  def message(new_value : String)
    @message = new_value
    self
  end
end

struct ECS::LogEntry


  property package : Package?

  # A chainable setter for package
  def package(value : Package)
    @package = value
    self
  end

  # Initialize a new Package, yield it to the block
  def package
    @package = yield Package.new
    self
  end


end

struct ECS::LogEntry::Package
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # package.checksum
  #
  # Checksum of the installed package for verification.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 68b329da9893e34099c7d8ad5cb9c940
  # ```
  property checksum : String?

  # A chainable setter for checksum
  def checksum(new_value : String)
    @checksum = new_value
    self
  end

  # package.build_version
  #
  # Additional information about the build version of the installed package.
  #
  # For example use the commit SHA of a non-released package.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 36f4f7e89dd61b0988b12ee000b98966867710cd
  # ```
  property build_version : String?

  # A chainable setter for build_version
  def build_version(new_value : String)
    @build_version = new_value
    self
  end

  # package.architecture
  #
  # Package architecture.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # x86_64
  # ```
  property architecture : String?

  # A chainable setter for architecture
  def architecture(new_value : String)
    @architecture = new_value
    self
  end

  # package.description
  #
  # Description of the package.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Open source programming language to build simple/reliable/efficient software.
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # package.install_scope
  #
  # Indicating how the package was installed, e.g. user-local, global.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # global
  # ```
  property install_scope : String?

  # A chainable setter for install_scope
  def install_scope(new_value : String)
    @install_scope = new_value
    self
  end

  # package.version
  #
  # Package version
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1.12.9
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # package.type
  #
  # Type of package.
  #
  # This should contain the package file type, rather than the package manager name.
  # Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # rpm
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # package.size
  #
  # Package size in bytes.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 62231
  # ```
  property size : UInt64?

  # A chainable setter for size
  def size(new_value : UInt64)
    @size = new_value
    self
  end

  # package.reference
  #
  # Home page or reference URL of the software in this package, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://golang.org
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # package.path
  #
  # Path where the package is installed.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /usr/local/Cellar/go/1.12.9/
  # ```
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end

  # package.name
  #
  # Package name
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # go
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # package.license
  #
  # License under which the package was released.
  #
  # Use a short name, e.g. the license identifier from SPDX License List where
  # possible (https://spdx.org/licenses/).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Apache License 2.0
  # ```
  property license : String?

  # A chainable setter for license
  def license(new_value : String)
    @license = new_value
    self
  end

  # package.installed
  #
  # Time when package was installed.
  #
  # Level: Extended
  # Type: Date
  property installed : Time?

  # A chainable setter for installed
  def installed(new_value : Time)
    @installed = new_value
    self
  end
end

struct ECS::LogEntry


  property organization : Organization?

  # A chainable setter for organization
  def organization(value : Organization)
    @organization = value
    self
  end

  # Initialize a new Organization, yield it to the block
  def organization
    @organization = yield Organization.new
    self
  end


end

struct ECS::LogEntry::Organization
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # organization.name
  #
  # Organization name.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # organization.id
  #
  # Unique identifier for the organization.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry


  property observer : Observer?

  # A chainable setter for observer
  def observer(value : Observer)
    @observer = value
    self
  end

  # Initialize a new Observer, yield it to the block
  def observer
    @observer = yield Observer.new
    self
  end


end

struct ECS::LogEntry::Observer
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.version
  #
  # Observer version.
  #
  # Level: Core
  # Type: Keyword
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # observer.vendor
  #
  # Vendor name of the observer.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Symantec
  # ```
  property vendor : String?

  # A chainable setter for vendor
  def vendor(new_value : String)
    @vendor = new_value
    self
  end

  # observer.type
  #
  # The type of the observer the data is coming from.
  #
  # There is no predefined list of observer types. Some examples are `forwarder`,
  # `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # firewall
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # observer.serial_number
  #
  # Observer serial number.
  #
  # Level: Extended
  # Type: Keyword
  property serial_number : String?

  # A chainable setter for serial_number
  def serial_number(new_value : String)
    @serial_number = new_value
    self
  end

  # observer.product
  #
  # The product name of the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # s200
  # ```
  property product : String?

  # A chainable setter for product
  def product(new_value : String)
    @product = new_value
    self
  end

  # observer.name
  #
  # Custom name of the observer.
  #
  # This is a name that can be given to an observer. This can be helpful for example
  # if multiple firewalls of the same model are used in an organization.
  #
  # If no custom name is needed, the field can be left empty.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1_proxySG
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.mac
  #
  # MAC addresses of the observer
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # observer.ip
  #
  # IP addresses of the observer.
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # observer.ingress
  #
  # Observer.ingress holds information like interface number and name, vlan, and
  # zone information to classify ingress traffic. Single armed monitoring such as a
  # network sensor on a span port should only use observer.ingress to categorize
  # traffic.
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property ingress : Hash(String, String)?

  # A chainable setter for ingress
  def ingress(new_value : Hash(String, String))
    @ingress = new_value
    self
  end

  # observer.hostname
  #
  # Hostname of the observer.
  #
  # Level: Core
  # Type: Keyword
  property hostname : String?

  # A chainable setter for hostname
  def hostname(new_value : String)
    @hostname = new_value
    self
  end

  # observer.egress
  #
  # Observer.egress holds information like interface number and name, vlan, and zone
  # information to classify egress traffic. Single armed monitoring such as a network
  # sensor on a span port should only use observer.ingress to categorize traffic.
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property egress : Hash(String, String)?

  # A chainable setter for egress
  def egress(new_value : Hash(String, String))
    @egress = new_value
    self
  end
end

struct ECS::LogEntry


  property vulnerability : Vulnerability?

  # A chainable setter for vulnerability
  def vulnerability(value : Vulnerability)
    @vulnerability = value
    self
  end

  # Initialize a new Vulnerability, yield it to the block
  def vulnerability
    @vulnerability = yield Vulnerability.new
    self
  end


end

struct ECS::LogEntry::Vulnerability
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # vulnerability.severity
  #
  # The severity of the vulnerability can help with metrics and internal
  # prioritization regarding remediation. For example
  # (https://nvd.nist.gov/vuln-metrics/cvss)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Critical
  # ```
  property severity : String?

  # A chainable setter for severity
  def severity(new_value : String)
    @severity = new_value
    self
  end

  # vulnerability.report_id
  #
  # The report or scan identification number.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 20191018.0001
  # ```
  property report_id : String?

  # A chainable setter for report_id
  def report_id(new_value : String)
    @report_id = new_value
    self
  end

  # vulnerability.reference
  #
  # A resource that provides additional information, context, and mitigations for
  # the identified vulnerability.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # vulnerability.id
  #
  # The identification (ID) is the number portion of a vulnerability entry. It
  # includes a unique identification number for the vulnerability. For example
  # (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and
  # Exposure CVE ID]
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CVE-2019-00001
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # vulnerability.enumeration
  #
  # The type of identifier used for this vulnerability. For example
  # (https://cve.mitre.org/about/)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CVE
  # ```
  property enumeration : String?

  # A chainable setter for enumeration
  def enumeration(new_value : String)
    @enumeration = new_value
    self
  end

  # vulnerability.description
  #
  # The description of the vulnerability that provides additional context of the
  # vulnerability. For example
  # (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common
  # Vulnerabilities and Exposure CVE description])
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # In macOS before 2.12.6, there is a vulnerability in the RPC...
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # vulnerability.classification
  #
  # The classification of the vulnerability scoring system. For example
  # (https://www.first.org/cvss/)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CVSS
  # ```
  property classification : String?

  # A chainable setter for classification
  def classification(new_value : String)
    @classification = new_value
    self
  end

  # vulnerability.category
  #
  # The type of system or architecture that the vulnerability affects. These may be
  # platform-specific (for example, Debian or SUSE) or general (for example, Database
  # or Firewall). For example
  # (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys
  # vulnerability categories])
  #
  # This field must be an array.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["Firewall"]
  # ```
  property category : String?

  # A chainable setter for category
  def category(new_value : String)
    @category = new_value
    self
  end
end

struct ECS::LogEntry


  property process : Process?

  # A chainable setter for process
  def process(value : Process)
    @process = value
    self
  end

  # Initialize a new Process, yield it to the block
  def process
    @process = yield Process.new
    self
  end


end

struct ECS::LogEntry::Process
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.title
  #
  # Process title.
  #
  # The proctitle, some times the same as process name. Can also be different: for
  # example a browser setting its title to the web page currently opened.
  #
  # Level: Extended
  # Type: Keyword
  property title : String?

  # A chainable setter for title
  def title(new_value : String)
    @title = new_value
    self
  end

  # process.start
  #
  # The time the process started.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2016-05-23T08:05:34.853Z
  # ```
  property start : Time?

  # A chainable setter for start
  def start(new_value : Time)
    @start = new_value
    self
  end

  # process.ppid
  #
  # Parent process' pid.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4241
  # ```
  property ppid : UInt64?

  # A chainable setter for ppid
  def ppid(new_value : UInt64)
    @ppid = new_value
    self
  end

  # process.pid
  #
  # Process id.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 4242
  # ```
  property pid : UInt64?

  # A chainable setter for pid
  def pid(new_value : UInt64)
    @pid = new_value
    self
  end

  # process.pgid
  #
  # Identifier of the group of processes the process belongs to.
  #
  # Level: Extended
  # Type: Long
  property pgid : UInt64?

  # A chainable setter for pgid
  def pgid(new_value : UInt64)
    @pgid = new_value
    self
  end

  # process.name
  #
  # Process name.
  #
  # Sometimes called program name or similar.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ssh
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # process.exit_code
  #
  # The exit code of the process, if this is a termination event.
  #
  # The field should be absent if there is no exit code for the event (e.g. process
  # start).
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 137
  # ```
  property exit_code : UInt64?

  # A chainable setter for exit_code
  def exit_code(new_value : UInt64)
    @exit_code = new_value
    self
  end

  # process.executable
  #
  # Absolute path to the process executable.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /usr/bin/ssh
  # ```
  property executable : String?

  # A chainable setter for executable
  def executable(new_value : String)
    @executable = new_value
    self
  end

  # process.entity_id
  #
  # Unique identifier for the process.
  #
  # The implementation of this is specified by the data source, but some examples of
  # what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a
  # hash of some uniquely identifying components of a process.
  #
  # Constructing a globally unique identifier is a common practice to mitigate PID
  # reuse as well as to identify a specific process over time, across multiple
  # monitored hosts.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # c2c455d9f99375d
  # ```
  property entity_id : String?

  # A chainable setter for entity_id
  def entity_id(new_value : String)
    @entity_id = new_value
    self
  end

  # process.command_line
  #
  # Full command line that started the process, including the absolute path to the
  # executable, and all arguments.
  #
  # Some arguments may be filtered to protect sensitive information.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /usr/bin/ssh -l user 10.0.0.16
  # ```
  property command_line : String?

  # A chainable setter for command_line
  def command_line(new_value : String)
    @command_line = new_value
    self
  end

  # process.args_count
  #
  # Length of the process.args array.
  #
  # This field can be useful for querying or performing bucket analysis on how many
  # arguments were provided to start a process. More arguments may be an indication
  # of suspicious activity.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4
  # ```
  property args_count : UInt64?

  # A chainable setter for args_count
  def args_count(new_value : UInt64)
    @args_count = new_value
    self
  end

  # process.args
  #
  # Array of process arguments, starting with the absolute path to the executable.
  #
  # May be filtered to protect sensitive information.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["/usr/bin/ssh", "-l", "user", "10.0.0.16"]
  # ```
  property args : String?

  # A chainable setter for args
  def args(new_value : String)
    @args = new_value
    self
  end

  # process.uptime
  #
  # Seconds the process has been up.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 1325
  # ```
  property uptime : UInt64?

  # A chainable setter for uptime
  def uptime(new_value : UInt64)
    @uptime = new_value
    self
  end

  # process.working_directory
  #
  # The working directory of the process.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /home/alice
  # ```
  property working_directory : String?

  # A chainable setter for working_directory
  def working_directory(new_value : String)
    @working_directory = new_value
    self
  end
end

struct ECS::LogEntry


  property network : Network?

  # A chainable setter for network
  def network(value : Network)
    @network = value
    self
  end

  # Initialize a new Network, yield it to the block
  def network
    @network = yield Network.new
    self
  end


end

struct ECS::LogEntry::Network
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # network.type
  #
  # In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
  #
  # The field value must be normalized to lowercase for querying. See the
  # documentation section "Implementing ECS".
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # ipv4
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # network.transport
  #
  # Same as network.iana_number, but instead using the Keyword name of the transport
  # layer (udp, tcp, ipv6-icmp, etc.)
  #
  # The field value must be normalized to lowercase for querying. See the
  # documentation section "Implementing ECS".
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # tcp
  # ```
  property transport : String?

  # A chainable setter for transport
  def transport(new_value : String)
    @transport = new_value
    self
  end

  # network.protocol
  #
  # L7 Network protocol name. ex. http, lumberjack, transport protocol.
  #
  # The field value must be normalized to lowercase for querying. See the
  # documentation section "Implementing ECS".
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # http
  # ```
  property protocol : String?

  # A chainable setter for protocol
  def protocol(new_value : String)
    @protocol = new_value
    self
  end

  # network.packets
  #
  # Total packets transferred in both directions.
  #
  # If `source.packets` and `destination.packets` are known, `network.packets` is
  # their sum.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 24
  # ```
  property packets : UInt64?

  # A chainable setter for packets
  def packets(new_value : UInt64)
    @packets = new_value
    self
  end

  # network.name
  #
  # Name given by operators to sections of their network.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Guest Wifi
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # network.inner
  #
  # Network.inner fields are added in addition to network.vlan fields to describe
  # the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include
  # vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic
  # with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property inner : Hash(String, String)?

  # A chainable setter for inner
  def inner(new_value : Hash(String, String))
    @inner = new_value
    self
  end

  # network.iana_number
  #
  # IANA Protocol Number
  # (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
  # Standardized list of protocols. This aligns well with NetFlow and sFlow related
  # logs which use the IANA Protocol Number.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 6
  # ```
  property iana_number : String?

  # A chainable setter for iana_number
  def iana_number(new_value : String)
    @iana_number = new_value
    self
  end

  # network.forwarded_ip
  #
  # Host IP address when the source IP address is the proxy.
  #
  # Level: Core
  # Type: IP
  # Example:
  # ```
  # 192.1.1.2
  # ```
  property forwarded_ip : String?

  # A chainable setter for forwarded_ip
  def forwarded_ip(new_value : String)
    @forwarded_ip = new_value
    self
  end

  # network.direction
  #
  # Direction of the network traffic.
  #
  # Recommended values are:
  #
  # * inbound
  #
  # * outbound
  #
  # * internal
  #
  # * external
  #
  # * unknown
  #
  # When mapping events from a host-based monitoring context, populate this field
  # from the host's point of view.
  #
  # When mapping events from a network or perimeter-based monitoring context,
  # populate this field from the point of view of your network perimeter.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # inbound
  # ```
  property direction : String?

  # A chainable setter for direction
  def direction(new_value : String)
    @direction = new_value
    self
  end

  # network.community_id
  #
  # A hash of source and destination IPs and ports, as well as the protocol used in
  # a communication. This is a tool-agnostic standard to identify flows.
  #
  # Learn more at https://github.com/corelight/community-id-spec.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=
  # ```
  property community_id : String?

  # A chainable setter for community_id
  def community_id(new_value : String)
    @community_id = new_value
    self
  end

  # network.bytes
  #
  # Total bytes transferred in both directions.
  #
  # If `source.bytes` and `destination.bytes` are known, `network.bytes` is their
  # sum.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 368
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # network.application
  #
  # A name given to an application level protocol. This can be arbitrarily assigned
  # for things like microservices, but also apply to things like skype, icq,
  # facebook, twitter. This would be used in situations where the vendor or service
  # can be decoded such as from the source/dest IP owners, ports, or wire format.
  #
  # The field value must be normalized to lowercase for querying. See the
  # documentation section "Implementing ECS".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # aim
  # ```
  property application : String?

  # A chainable setter for application
  def application(new_value : String)
    @application = new_value
    self
  end
end

struct ECS::LogEntry


  property host : Host?

  # A chainable setter for host
  def host(value : Host)
    @host = value
    self
  end

  # Initialize a new Host, yield it to the block
  def host
    @host = yield Host.new
    self
  end


end

struct ECS::LogEntry::Host
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # host.ip
  #
  # Host ip addresses.
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # host.id
  #
  # Unique host id.
  #
  # As hostname is not always unique, use values that are meaningful in your
  # environment.
  #
  # Example: The current usage of `beat.name`.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # host.hostname
  #
  # Hostname of the host.
  #
  # It normally contains what the `hostname` command returns on the host machine.
  #
  # Level: Core
  # Type: Keyword
  property hostname : String?

  # A chainable setter for hostname
  def hostname(new_value : String)
    @hostname = new_value
    self
  end

  # host.domain
  #
  # Name of the domain of which the host is a member.
  #
  # For example, on Windows this could be the host's Active Directory domain or
  # NetBIOS domain name. For Linux this could be the domain of the host's LDAP
  # provider.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CONTOSO
  # ```
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # host.architecture
  #
  # Operating system architecture.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # x86_64
  # ```
  property architecture : String?

  # A chainable setter for architecture
  def architecture(new_value : String)
    @architecture = new_value
    self
  end

  # host.mac
  #
  # Host mac addresses.
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # host.name
  #
  # Name of the host.
  #
  # It can contain what `hostname` returns on Unix systems, the fully qualified
  # domain name, or a name specified by the user. The sender decides which value to
  # use.
  #
  # Level: Core
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # host.uptime
  #
  # Seconds the host has been up.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 1325
  # ```
  property uptime : UInt64?

  # A chainable setter for uptime
  def uptime(new_value : UInt64)
    @uptime = new_value
    self
  end

  # host.type
  #
  # Type of host.
  #
  # For Cloud providers this can be the machine type like `t2.medium`. If vm, this
  # could be the container, for example, or other information meaningful in your
  # environment.
  #
  # Level: Core
  # Type: Keyword
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end
end

struct ECS::LogEntry


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end
end

struct ECS::LogEntry


  property file : File?

  # A chainable setter for file
  def file(value : File)
    @file = value
    self
  end

  # Initialize a new File, yield it to the block
  def file
    @file = yield File.new
    self
  end


end

struct ECS::LogEntry::File
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.uid
  #
  # The user ID (UID) or security identifier (SID) of the file owner.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1001
  # ```
  property uid : String?

  # A chainable setter for uid
  def uid(new_value : String)
    @uid = new_value
    self
  end

  # file.type
  #
  # File type (file, dir, or symlink).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # file
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # file.target_path
  #
  # Target path for symlinks.
  #
  # Level: Extended
  # Type: Keyword
  property target_path : String?

  # A chainable setter for target_path
  def target_path(new_value : String)
    @target_path = new_value
    self
  end

  # file.size
  #
  # File size in bytes.
  #
  # Only relevant when `file.type` is "file".
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 16384
  # ```
  property size : UInt64?

  # A chainable setter for size
  def size(new_value : UInt64)
    @size = new_value
    self
  end

  # file.path
  #
  # Full path to the file, including the file name. It should include the drive
  # letter, when appropriate.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /home/alice/example.png
  # ```
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end

  # file.owner
  #
  # File owner's username.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # alice
  # ```
  property owner : String?

  # A chainable setter for owner
  def owner(new_value : String)
    @owner = new_value
    self
  end

  # file.name
  #
  # Name of the file including the extension, without the directory.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # example.png
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # file.mtime
  #
  # Last time the file content was modified.
  #
  # Level: Extended
  # Type: Date
  property mtime : Time?

  # A chainable setter for mtime
  def mtime(new_value : Time)
    @mtime = new_value
    self
  end

  # file.mode
  #
  # Mode of the file in octal representation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0640
  # ```
  property mode : String?

  # A chainable setter for mode
  def mode(new_value : String)
    @mode = new_value
    self
  end

  # file.mime_type
  #
  # MIME type should identify the format of the file or stream of bytes using
  # https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official
  # types], where possible. When more than one type is applicable, the most specific
  # type should be used.
  #
  # Level: Extended
  # Type: Keyword
  property mime_type : String?

  # A chainable setter for mime_type
  def mime_type(new_value : String)
    @mime_type = new_value
    self
  end

  # file.inode
  #
  # Inode representing the file in the filesystem.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 256383
  # ```
  property inode : String?

  # A chainable setter for inode
  def inode(new_value : String)
    @inode = new_value
    self
  end

  # file.created
  #
  # File creation time.
  #
  # Note that not all filesystems store the creation time.
  #
  # Level: Extended
  # Type: Date
  property created : Time?

  # A chainable setter for created
  def created(new_value : Time)
    @created = new_value
    self
  end

  # file.ctime
  #
  # Last time the file attributes or metadata changed.
  #
  # Note that changes to the file content will update `mtime`. This implies `ctime`
  # will be adjusted at the same time, since `mtime` is an attribute of the file.
  #
  # Level: Extended
  # Type: Date
  property ctime : Time?

  # A chainable setter for ctime
  def ctime(new_value : Time)
    @ctime = new_value
    self
  end

  # file.device
  #
  # Device that is the source of the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # sda
  # ```
  property device : String?

  # A chainable setter for device
  def device(new_value : String)
    @device = new_value
    self
  end

  # file.directory
  #
  # Directory where the file is located. It should include the drive letter, when
  # appropriate.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /home/alice
  # ```
  property directory : String?

  # A chainable setter for directory
  def directory(new_value : String)
    @directory = new_value
    self
  end

  # file.drive_letter
  #
  # Drive letter where the file is located. This field is only relevant on Windows.
  #
  # The value should be uppercase, and not include the colon.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C
  # ```
  property drive_letter : String?

  # A chainable setter for drive_letter
  def drive_letter(new_value : String)
    @drive_letter = new_value
    self
  end

  # file.extension
  #
  # File extension.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # png
  # ```
  property extension : String?

  # A chainable setter for extension
  def extension(new_value : String)
    @extension = new_value
    self
  end

  # file.gid
  #
  # Primary group ID (GID) of the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1001
  # ```
  property gid : String?

  # A chainable setter for gid
  def gid(new_value : String)
    @gid = new_value
    self
  end

  # file.group
  #
  # Primary group name of the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # alice
  # ```
  property group : String?

  # A chainable setter for group
  def group(new_value : String)
    @group = new_value
    self
  end

  # file.accessed
  #
  # Last time the file was accessed.
  #
  # Note that not all filesystems keep track of access time.
  #
  # Level: Extended
  # Type: Date
  property accessed : Time?

  # A chainable setter for accessed
  def accessed(new_value : Time)
    @accessed = new_value
    self
  end

  # file.attributes
  #
  # Array of file attributes.
  #
  # Attributes names will vary by platform. Here's a non-exhaustive list of values
  # that are expected in this field: archive, compressed, directory, encrypted,
  # execute, hidden, read, readonly, system, write.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["readonly", "system"]
  # ```
  property attributes : String?

  # A chainable setter for attributes
  def attributes(new_value : String)
    @attributes = new_value
    self
  end
end

struct ECS::LogEntry


  property log : Log?

  # A chainable setter for log
  def log(value : Log)
    @log = value
    self
  end

  # Initialize a new Log, yield it to the block
  def log
    @log = yield Log.new
    self
  end


end

struct ECS::LogEntry::Log
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.syslog
  #
  # The Syslog metadata of the event, if the event was transmitted via Syslog.
  # Please see RFCs 5424 or 3164.
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property syslog : Hash(String, String)?

  # A chainable setter for syslog
  def syslog(new_value : Hash(String, String))
    @syslog = new_value
    self
  end

  # log.original
  #
  # This is the original log message and contains the full log message before
  # splitting it up in multiple parts.
  #
  # In contrast to the `message` field which can contain an extracted part of the
  # log message, this field contains the original, full log message. It can have
  # already some modifications applied like encoding or new lines removed to clean up
  # the log message.
  #
  # This field is not indexed and doc_values are disabled so it can't be queried but
  # the value can be retrieved from `_source`.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Sep 19 08:26:10 localhost My log
  # ```
  property original : String?

  # A chainable setter for original
  def original(new_value : String)
    @original = new_value
    self
  end

  # log.logger
  #
  # The name of the logger inside an application. This is usually the name of the
  # class which initialized the logger, or can be a custom name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # org.elasticsearch.bootstrap.Bootstrap
  # ```
  property logger : String?

  # A chainable setter for logger
  def logger(new_value : String)
    @logger = new_value
    self
  end

  # log.level
  #
  # Original log level of the log event.
  #
  # If the source of the event provides a log level or textual severity, this is the
  # one that goes in `log.level`. If your source doesn't specify one, you may put
  # your event transport's severity here (e.g. Syslog severity).
  #
  # Some examples are `warn`, `err`, `i`, `informational`.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # error
  # ```
  property level : String?

  # A chainable setter for level
  def level(new_value : String)
    @level = new_value
    self
  end
end

struct ECS::LogEntry


  property http : Http?

  # A chainable setter for http
  def http(value : Http)
    @http = value
    self
  end

  # Initialize a new Http, yield it to the block
  def http
    @http = yield Http.new
    self
  end


end

struct ECS::LogEntry::Http
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # http.version
  #
  # HTTP version.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1.1
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end
end

struct ECS::LogEntry


  property url : Url?

  # A chainable setter for url
  def url(value : Url)
    @url = value
    self
  end

  # Initialize a new Url, yield it to the block
  def url
    @url = yield Url.new
    self
  end


end

struct ECS::LogEntry::Url
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # url.port
  #
  # Port of the request, such as 443.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 443
  # ```
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end

  # url.path
  #
  # Path of the request, such as "/search".
  #
  # Level: Extended
  # Type: Keyword
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end

  # url.password
  #
  # Password of the request.
  #
  # Level: Extended
  # Type: Keyword
  property password : String?

  # A chainable setter for password
  def password(new_value : String)
    @password = new_value
    self
  end

  # url.original
  #
  # Unmodified original url as seen in the event source.
  #
  # Note that in network monitoring, the observed URL may be a full URL, whereas in
  # access logs, the URL is often just represented as a path.
  #
  # This field is meant to represent the URL as it was observed, complete or not.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
  # ```
  property original : String?

  # A chainable setter for original
  def original(new_value : String)
    @original = new_value
    self
  end

  # url.full
  #
  # If full URLs are important to your use case, they should be stored in
  # `url.full`, whether this field is reconstructed or present in the event source.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://www.elastic.co:443/search?q=elasticsearch#top
  # ```
  property full : String?

  # A chainable setter for full
  def full(new_value : String)
    @full = new_value
    self
  end

  # url.fragment
  #
  # Portion of the url after the `#`, such as "top".
  #
  # The `#` is not part of the fragment.
  #
  # Level: Extended
  # Type: Keyword
  property fragment : String?

  # A chainable setter for fragment
  def fragment(new_value : String)
    @fragment = new_value
    self
  end

  # url.extension
  #
  # The field contains the file extension from the original request url.
  #
  # The file extension is only set if it exists, as not every url has a file
  # extension.
  #
  # The leading period must not be included. For example, the value must be "png",
  # not ".png".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # png
  # ```
  property extension : String?

  # A chainable setter for extension
  def extension(new_value : String)
    @extension = new_value
    self
  end

  # url.domain
  #
  # Domain of the url, such as "www.elastic.co".
  #
  # In some cases a URL may refer to an IP and/or port directly, without a domain
  # name. In this case, the IP address would go to the `domain` field.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.elastic.co
  # ```
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # url.query
  #
  # The query field describes the query string of the request, such as
  # "q=elasticsearch".
  #
  # The `?` is excluded from the query string. If a URL contains no `?`, there is no
  # query field. If there is a `?` but no query, the query field exists with an empty
  # string. The `exists` query can be used to differentiate between the two cases.
  #
  # Level: Extended
  # Type: Keyword
  property query : String?

  # A chainable setter for query
  def query(new_value : String)
    @query = new_value
    self
  end

  # url.registered_domain
  #
  # The highest registered url domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end

  # url.username
  #
  # Username of the request.
  #
  # Level: Extended
  # Type: Keyword
  property username : String?

  # A chainable setter for username
  def username(new_value : String)
    @username = new_value
    self
  end

  # url.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # url.scheme
  #
  # Scheme of the request, such as "https".
  #
  # Note: The `:` is not part of the scheme.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https
  # ```
  property scheme : String?

  # A chainable setter for scheme
  def scheme(new_value : String)
    @scheme = new_value
    self
  end
end

struct ECS::LogEntry


  property transaction : Transaction?

  # A chainable setter for transaction
  def transaction(value : Transaction)
    @transaction = value
    self
  end

  # Initialize a new Transaction, yield it to the block
  def transaction
    @transaction = yield Transaction.new
    self
  end


end

struct ECS::LogEntry::Transaction
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # transaction.id
  #
  # Unique identifier of the transaction.
  #
  # A transaction is the highest level of work measured within a service, such as a
  # request to a server.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 00f067aa0ba902b7
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry


  property trace : Trace?

  # A chainable setter for trace
  def trace(value : Trace)
    @trace = value
    self
  end

  # Initialize a new Trace, yield it to the block
  def trace
    @trace = yield Trace.new
    self
  end


end

struct ECS::LogEntry::Trace
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # trace.id
  #
  # Unique identifier of the trace.
  #
  # A trace groups multiple events like transactions that belong together. For
  # example, a user request handled by multiple inter-connected services.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 4bf92f3577b34da6a3ce929d0e0e4736
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry


  property tls : Tls?

  # A chainable setter for tls
  def tls(value : Tls)
    @tls = value
    self
  end

  # Initialize a new Tls, yield it to the block
  def tls
    @tls = yield Tls.new
    self
  end


end

struct ECS::LogEntry::Tls
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.version_protocol
  #
  # Normalized lowercase protocol name parsed from original string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # tls
  # ```
  property version_protocol : String?

  # A chainable setter for version_protocol
  def version_protocol(new_value : String)
    @version_protocol = new_value
    self
  end

  # tls.version
  #
  # Numeric part of the version parsed from the original string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1.2
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # tls.resumed
  #
  # Boolean flag indicating if this TLS connection was resumed from an existing TLS
  # negotiation.
  #
  # Level: Extended
  # Type: Boolean
  property resumed : Bool?

  # A chainable setter for resumed
  def resumed(new_value : Bool)
    @resumed = new_value
    self
  end

  # tls.next_protocol
  #
  # String indicating the protocol being tunneled. Per the values in the IANA
  # registry
  # (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),
  # this string should be lower case.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # http/1.1
  # ```
  property next_protocol : String?

  # A chainable setter for next_protocol
  def next_protocol(new_value : String)
    @next_protocol = new_value
    self
  end

  # tls.established
  #
  # Boolean flag indicating if the TLS negotiation was successful and transitioned
  # to an encrypted tunnel.
  #
  # Level: Extended
  # Type: Boolean
  property established : Bool?

  # A chainable setter for established
  def established(new_value : Bool)
    @established = new_value
    self
  end

  # tls.curve
  #
  # String indicating the curve used for the given cipher, when applicable.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # secp256r1
  # ```
  property curve : String?

  # A chainable setter for curve
  def curve(new_value : String)
    @curve = new_value
    self
  end

  # tls.cipher
  #
  # String indicating the cipher used during the current connection.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
  # ```
  property cipher : String?

  # A chainable setter for cipher
  def cipher(new_value : String)
    @cipher = new_value
    self
  end
end

struct ECS::LogEntry


  property threat : Threat?

  # A chainable setter for threat
  def threat(value : Threat)
    @threat = value
    self
  end

  # Initialize a new Threat, yield it to the block
  def threat
    @threat = yield Threat.new
    self
  end


end

struct ECS::LogEntry::Threat
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # threat.framework
  #
  # Name of the threat framework used to further categorize and classify the tactic
  # and technique of the reported threat. Framework classification can be provided by
  # detecting systems, evaluated at ingest time, or retrospectively tagged to events.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MITRE ATT&CK
  # ```
  property framework : String?

  # A chainable setter for framework
  def framework(new_value : String)
    @framework = new_value
    self
  end
end

struct ECS::LogEntry


  property useragent : UserAgent?

  # A chainable setter for useragent
  def useragent(value : UserAgent)
    @useragent = value
    self
  end

  # Initialize a new UserAgent, yield it to the block
  def useragent
    @useragent = yield UserAgent.new
    self
  end


end

struct ECS::LogEntry::UserAgent
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # user_agent.version
  #
  # Version of the user agent.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 12.0
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # user_agent.original
  #
  # Unparsed user_agent string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
  # ```
  property original : String?

  # A chainable setter for original
  def original(new_value : String)
    @original = new_value
    self
  end

  # user_agent.name
  #
  # Name of the user agent.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Safari
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end
end

struct ECS::LogEntry


  property source : Source?

  # A chainable setter for source
  def source(value : Source)
    @source = value
    self
  end

  # Initialize a new Source, yield it to the block
  def source
    @source = yield Source.new
    self
  end


end

struct ECS::LogEntry::Source
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # source.registered_domain
  #
  # The highest registered source domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end

  # source.port
  #
  # Port of the source.
  #
  # Level: Core
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end

  # source.packets
  #
  # Packets sent from the source to the destination.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 12
  # ```
  property packets : UInt64?

  # A chainable setter for packets
  def packets(new_value : UInt64)
    @packets = new_value
    self
  end

  # source.mac
  #
  # MAC address of the source.
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # source.ip
  #
  # IP address of the source (IPv4 or IPv6).
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # source.domain
  #
  # Source domain.
  #
  # Level: Core
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # source.bytes
  #
  # Bytes sent from the source to the destination.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 184
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # source.address
  #
  # Some event source addresses are defined ambiguously. The event will sometimes
  # list an IP, a domain or a unix socket. You should always store the raw address in
  # the `.address` field.
  #
  # Then it should be duplicated to `.ip` or `.domain`, depending on which one it
  # is.
  #
  # Level: Extended
  # Type: Keyword
  property address : String?

  # A chainable setter for address
  def address(new_value : String)
    @address = new_value
    self
  end
end

struct ECS::LogEntry


  property server : Server?

  # A chainable setter for server
  def server(value : Server)
    @server = value
    self
  end

  # Initialize a new Server, yield it to the block
  def server
    @server = yield Server.new
    self
  end


end

struct ECS::LogEntry::Server
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.address
  #
  # Some event server addresses are defined ambiguously. The event will sometimes
  # list an IP, a domain or a unix socket. You should always store the raw address in
  # the `.address` field.
  #
  # Then it should be duplicated to `.ip` or `.domain`, depending on which one it
  # is.
  #
  # Level: Extended
  # Type: Keyword
  property address : String?

  # A chainable setter for address
  def address(new_value : String)
    @address = new_value
    self
  end

  # server.bytes
  #
  # Bytes sent from the server to the client.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 184
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # server.domain
  #
  # Server domain.
  #
  # Level: Core
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # server.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # server.registered_domain
  #
  # The highest registered server domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end

  # server.port
  #
  # Port of the server.
  #
  # Level: Core
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end

  # server.packets
  #
  # Packets sent from the server to the client.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 12
  # ```
  property packets : UInt64?

  # A chainable setter for packets
  def packets(new_value : UInt64)
    @packets = new_value
    self
  end

  # server.mac
  #
  # MAC address of the server.
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # server.ip
  #
  # IP address of the server (IPv4 or IPv6).
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end
end

struct ECS::LogEntry


  property rule : Rule?

  # A chainable setter for rule
  def rule(value : Rule)
    @rule = value
    self
  end

  # Initialize a new Rule, yield it to the block
  def rule
    @rule = yield Rule.new
    self
  end


end

struct ECS::LogEntry::Rule
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # rule.version
  #
  # The version / revision of the rule being used for analysis.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1.1
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # rule.uuid
  #
  # A rule ID that is unique within the scope of a set or group of agents,
  # observers, or other entities using the rule for detection of this event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 1100110011
  # ```
  property uuid : String?

  # A chainable setter for uuid
  def uuid(new_value : String)
    @uuid = new_value
    self
  end

  # rule.ruleset
  #
  # Name of the ruleset, policy, group, or parent category in which the rule used to
  # generate this event is a member.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Standard_Protocol_Filters
  # ```
  property ruleset : String?

  # A chainable setter for ruleset
  def ruleset(new_value : String)
    @ruleset = new_value
    self
  end

  # rule.reference
  #
  # Reference URL to additional information about the rule used to generate this
  # event.
  #
  # The URL can point to the vendor's documentation about the rule. If that's not
  # available, it can also be a link to a more general page describing this type of
  # alert.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://en.wikipedia.org/wiki/DNS_over_TLS
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # rule.name
  #
  # The name of the rule or signature generating the event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # BLOCK_DNS_over_TLS
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # rule.license
  #
  # Name of the license under which the rule used to generate this event is made
  # available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Apache 2.0
  # ```
  property license : String?

  # A chainable setter for license
  def license(new_value : String)
    @license = new_value
    self
  end

  # rule.id
  #
  # A rule ID that is unique within the scope of an agent, observer, or other entity
  # using the rule for detection of this event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 101
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # rule.description
  #
  # The description of the rule generating the event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Block requests to public DNS over HTTPS / TLS protocols
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # rule.category
  #
  # A categorization value keyword used by the entity using the rule for detection
  # of this event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Attempted Information Leak
  # ```
  property category : String?

  # A chainable setter for category
  def category(new_value : String)
    @category = new_value
    self
  end

  # rule.author
  #
  # Name, organization, or pseudonym of the author or authors who created the rule
  # used to generate this event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["Star-Lord"]
  # ```
  property author : String?

  # A chainable setter for author
  def author(new_value : String)
    @author = new_value
    self
  end
end

struct ECS::LogEntry


  property related : Related?

  # A chainable setter for related
  def related(value : Related)
    @related = value
    self
  end

  # Initialize a new Related, yield it to the block
  def related
    @related = yield Related.new
    self
  end


end

struct ECS::LogEntry::Related
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # related.user
  #
  # All the user names seen on your event.
  #
  # Level: Extended
  # Type: Keyword
  property user : String?

  # A chainable setter for user
  def user(new_value : String)
    @user = new_value
    self
  end

  # related.ip
  #
  # All of the IPs seen on your event.
  #
  # Level: Extended
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # related.hash
  #
  # All the hashes seen on your event. Populating this field, then using it to
  # search for hashes can help in situations where you're unsure what the hash
  # algorithm is (and therefore which key name to search).
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end
end

struct ECS::LogEntry


  property registry : Registry?

  # A chainable setter for registry
  def registry(value : Registry)
    @registry = value
    self
  end

  # Initialize a new Registry, yield it to the block
  def registry
    @registry = yield Registry.new
    self
  end


end

struct ECS::LogEntry::Registry
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # registry.value
  #
  # Name of the value written.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Debugger
  # ```
  property value : String?

  # A chainable setter for value
  def value(new_value : String)
    @value = new_value
    self
  end

  # registry.path
  #
  # Full path, including hive, key and value
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger
  # ```
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end

  # registry.key
  #
  # Hive-relative path of keys.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe
  # ```
  property key : String?

  # A chainable setter for key
  def key(new_value : String)
    @key = new_value
    self
  end

  # registry.hive
  #
  # Abbreviated name for the hive.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # HKLM
  # ```
  property hive : String?

  # A chainable setter for hive
  def hive(new_value : String)
    @hive = new_value
    self
  end
end

struct ECS::LogEntry


  property service : Service?

  # A chainable setter for service
  def service(value : Service)
    @service = value
    self
  end

  # Initialize a new Service, yield it to the block
  def service
    @service = yield Service.new
    self
  end


end

struct ECS::LogEntry::Service
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # service.version
  #
  # Version of the service the data was collected from.
  #
  # This allows to look at a data set only for a specific version of a service.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # 3.2.4
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # service.type
  #
  # The type of the service data is collected from.
  #
  # The type can be used to group and correlate logs and metrics from one service
  # type.
  #
  # Example: If logs or metrics are collected from Elasticsearch, `service.type`
  # would be `elasticsearch`.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # elasticsearch
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # service.state
  #
  # Current state of the service.
  #
  # Level: Core
  # Type: Keyword
  property state : String?

  # A chainable setter for state
  def state(new_value : String)
    @state = new_value
    self
  end

  # service.name
  #
  # Name of the service data is collected from.
  #
  # The name of the service is normally user given. This allows for distributed
  # services that run on multiple hosts to correlate the related instances based on
  # the name.
  #
  # In the case of Elasticsearch the `service.name` could contain the cluster name.
  # For Beats the `service.name` is by default a copy of the `service.type` field if
  # no name is specified.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # elasticsearch-metrics
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # service.id
  #
  # Unique identifier of the running service. If the service is comprised of many
  # nodes, the `service.id` should be the same for all nodes.
  #
  # This id should uniquely identify the service. This makes it possible to
  # correlate logs and metrics for one specific service, no matter which particular
  # node emitted the event.
  #
  # Note that if you need to see the events from one specific host of the service,
  # you should filter on that `host.name` or `host.id` instead.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # service.ephemeral_id
  #
  # Ephemeral identifier of this service (if one exists).
  #
  # This id normally changes across restarts, but `service.id` does not.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 8a4f500f
  # ```
  property ephemeral_id : String?

  # A chainable setter for ephemeral_id
  def ephemeral_id(new_value : String)
    @ephemeral_id = new_value
    self
  end
end

struct ECS::LogEntry


  property event : Event?

  # A chainable setter for event
  def event(value : Event)
    @event = value
    self
  end

  # Initialize a new Event, yield it to the block
  def event
    @event = yield Event.new
    self
  end


end

struct ECS::LogEntry::Event
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # event.hash
  #
  # Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log
  # integrity.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 123456789012345678901234567890ABCD
  # ```
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # event.original
  #
  # Raw text message of entire event. Used to demonstrate log integrity.
  #
  # This field is not indexed and doc_values are disabled. It cannot be searched,
  # but it can be retrieved from `_source`.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
  # ```
  property original : String?

  # A chainable setter for original
  def original(new_value : String)
    @original = new_value
    self
  end

  # event.outcome
  #
  # This is one of four ECS Categorization Fields, and indicates the lowest level in
  # the ECS category hierarchy.
  #
  # `event.outcome` simply denotes whether the event represents a success or a
  # failure from the perspective of the entity that produced the event.
  #
  # Note that when a single transaction is described in multiple events, each event
  # may populate different values of `event.outcome`, according to their perspective.
  #
  # Also note that in the case of a compound event (a single event that contains
  # multiple logical events), this field should be populated with the value that best
  # captures the overall success or failure from the perspective of the event
  # producer.
  #
  # Further note that not all events will have an associated outcome. For example,
  # this field is generally not populated for metric events, events with
  # `event.type:info`, or any events for which an outcome does not make logical
  # sense.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # success
  # ```
  property outcome : String?

  # A chainable setter for outcome
  def outcome(new_value : String)
    @outcome = new_value
    self
  end

  # event.provider
  #
  # Source of the event.
  #
  # Event transports such as Syslog or the Windows Event Log typically mention the
  # source of an event. It can be the name of the software that generated the event
  # (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel,
  # Microsoft-Windows-Security-Auditing).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # kernel
  # ```
  property provider : String?

  # A chainable setter for provider
  def provider(new_value : String)
    @provider = new_value
    self
  end

  # event.reference
  #
  # Reference URL linking to additional information about this event.
  #
  # This URL links to a static definition of the this event. Alert events, indicated
  # by `event.kind:alert`, are a common use case for this field.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://system.vendor.com/event/#0001234
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # event.risk_score
  #
  # Risk score or priority of the event (e.g. security solutions). Use your system's
  # original value here.
  #
  # Level: Core
  # Type: Float
  property risk_score : Float64?

  # A chainable setter for risk_score
  def risk_score(new_value : Float64)
    @risk_score = new_value
    self
  end

  # event.risk_score_norm
  #
  # Normalized risk score or priority of the event, on a scale of 0 to 100.
  #
  # This is mainly useful if you use more than one system that assigns risk scores,
  # and you want to see a normalized value across all systems.
  #
  # Level: Extended
  # Type: Float
  property risk_score_norm : Float64?

  # A chainable setter for risk_score_norm
  def risk_score_norm(new_value : Float64)
    @risk_score_norm = new_value
    self
  end

  # event.sequence
  #
  # Sequence number of the event.
  #
  # The sequence number is a value published by some event sources, to make the
  # exact ordering of events unambiguous, regardless of the timestamp precision.
  #
  # Level: Extended
  # Type: Long
  property sequence : UInt64?

  # A chainable setter for sequence
  def sequence(new_value : UInt64)
    @sequence = new_value
    self
  end

  # event.severity
  #
  # The numeric severity of the event according to your event source.
  #
  # What the different severity values mean can be different between sources and use
  # cases. It's up to the implementer to make sure severities are consistent across
  # events from the same source.
  #
  # The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is
  # meant to represent the severity according to the event source (e.g. firewall,
  # IDS). If the event source does not publish its own severity, you may optionally
  # copy the `log.syslog.severity.code` to `event.severity`.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 7
  # ```
  property severity : UInt64?

  # A chainable setter for severity
  def severity(new_value : UInt64)
    @severity = new_value
    self
  end

  # event.start
  #
  # event.start contains the date when the event started or when the activity was
  # first observed.
  #
  # Level: Extended
  # Type: Date
  property start : Time?

  # A chainable setter for start
  def start(new_value : Time)
    @start = new_value
    self
  end

  # event.timezone
  #
  # This field should be populated when the event's timestamp does not include
  # timezone information already (e.g. default Syslog timestamps). It's optional
  # otherwise.
  #
  # Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),
  # abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  #
  # Level: Extended
  # Type: Keyword
  property timezone : String?

  # A chainable setter for timezone
  def timezone(new_value : String)
    @timezone = new_value
    self
  end

  # event.type
  #
  # This is one of four ECS Categorization Fields, and indicates the third level in
  # the ECS category hierarchy.
  #
  # `event.type` represents a categorization "sub-bucket" that, when used along with
  # the `event.category` field values, enables filtering events down to a level
  # appropriate for single visualization.
  #
  # This field is an array. This will allow proper categorization of some events
  # that fall in multiple event types.
  #
  # Level: Core
  # Type: Keyword
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # event.url
  #
  # URL linking to an external system to continue investigation of this event.
  #
  # This URL links to another system where in-depth investigation of the specific
  # occurence of this event can take place. Alert events, indicated by
  # `event.kind:alert`, are a common use case for this field.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://mysystem.mydomain.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe
  # ```
  property url : String?

  # A chainable setter for url
  def url(new_value : String)
    @url = new_value
    self
  end

  # event.module
  #
  # Name of the module this data is coming from.
  #
  # If your monitoring agent supports the concept of modules or plugins to process
  # events of a given source (e.g. Apache logs), `event.module` should contain the
  # name of this module.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # apache
  # ```
  property module : String?

  # A chainable setter for module
  def module(new_value : String)
    @module = new_value
    self
  end

  # event.kind
  #
  # This is one of four ECS Categorization Fields, and indicates the highest level
  # in the ECS category hierarchy.
  #
  # `event.kind` gives high-level information about what type of information the
  # event contains, without being specific to the contents of the event. For example,
  # values of this field distinguish alert events from metric events.
  #
  # The value of this field can be used to inform how these kinds of events should
  # be handled. They may warrant different retention, different access control, it
  # may also help understand whether the data coming in at a regular interval or not.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # alert
  # ```
  property kind : String?

  # A chainable setter for kind
  def kind(new_value : String)
    @kind = new_value
    self
  end

  # event.action
  #
  # The action captured by the event.
  #
  # This describes the information in the event. It is more specific than
  # `event.category`. Examples are `group-add`, `process-started`, `file-created`.
  # The value is normally defined by the implementer.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # user-password-change
  # ```
  property action : String?

  # A chainable setter for action
  def action(new_value : String)
    @action = new_value
    self
  end

  # event.category
  #
  # This is one of four ECS Categorization Fields, and indicates the second level in
  # the ECS category hierarchy.
  #
  # `event.category` represents the "big buckets" of ECS categories. For example,
  # filtering on `event.category:process` yields all events relating to process
  # activity. This field is closely related to `event.type`, which is used as a
  # subcategory.
  #
  # This field is an array. This will allow proper categorization of some events
  # that fall in multiple categories.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # authentication
  # ```
  property category : String?

  # A chainable setter for category
  def category(new_value : String)
    @category = new_value
    self
  end

  # event.code
  #
  # Identification code for this event, if one exists.
  #
  # Some event sources use event codes to identify messages unambiguously,
  # regardless of message language or wording adjustments over time. An example of
  # this is the Windows Event ID.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 4648
  # ```
  property code : String?

  # A chainable setter for code
  def code(new_value : String)
    @code = new_value
    self
  end

  # event.created
  #
  # event.created contains the date/time when the event was first read by an agent,
  # or by your pipeline.
  #
  # This field is distinct from @timestamp in that @timestamp typically contain the
  # time extracted from the original event.
  #
  # In most situations, these two timestamps will be slightly different. The
  # difference can be used to calculate the delay between your source generating an
  # event, and the time when your agent first processed it. This can be used to
  # monitor your agent's or pipeline's ability to keep up with your event source.
  #
  # In case the two timestamps are identical, @timestamp should be used.
  #
  # Level: Core
  # Type: Date
  # Example:
  # ```
  # 2016-05-23T08:05:34.857Z
  # ```
  property created : Time?

  # A chainable setter for created
  def created(new_value : Time)
    @created = new_value
    self
  end

  # event.dataset
  #
  # Name of the dataset.
  #
  # If an event source publishes more than one type of log or events (e.g. access
  # log, error log), the dataset is used to specify which one the event comes from.
  #
  # It's recommended but not required to start the dataset name with the module
  # name, followed by a dot, then the dataset name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # apache.access
  # ```
  property dataset : String?

  # A chainable setter for dataset
  def dataset(new_value : String)
    @dataset = new_value
    self
  end

  # event.duration
  #
  # Duration of the event in nanoseconds.
  #
  # If event.start and event.end are known this value should be the difference
  # between the end and start time.
  #
  # Level: Core
  # Type: Long
  property duration : UInt64?

  # A chainable setter for duration
  def duration(new_value : UInt64)
    @duration = new_value
    self
  end

  # event.end
  #
  # event.end contains the date when the event ended or when the activity was last
  # observed.
  #
  # Level: Extended
  # Type: Date
  property end : Time?

  # A chainable setter for end
  def end(new_value : Time)
    @end = new_value
    self
  end

  # event.id
  #
  # Unique ID to describe the event.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # 8a4f500d
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # event.ingested
  #
  # Timestamp when an event arrived in the central data store.
  #
  # This is different from `@timestamp`, which is when the event originally
  # occurred. It's also different from `event.created`, which is meant to capture the
  # first time an agent saw the event.
  #
  # In normal conditions, assuming no tampering, the timestamps should
  # chronologically look like this: `@timestamp` < `event.created` <
  # `event.ingested`.
  #
  # Level: Core
  # Type: Date
  # Example:
  # ```
  # 2016-05-23T08:05:35.101Z
  # ```
  property ingested : Time?

  # A chainable setter for ingested
  def ingested(new_value : Time)
    @ingested = new_value
    self
  end
end

struct ECS::LogEntry


  property destination : Destination?

  # A chainable setter for destination
  def destination(value : Destination)
    @destination = value
    self
  end

  # Initialize a new Destination, yield it to the block
  def destination
    @destination = yield Destination.new
    self
  end


end

struct ECS::LogEntry::Destination
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.bytes
  #
  # Bytes sent from the destination to the source.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 184
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # destination.domain
  #
  # Destination domain.
  #
  # Level: Core
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # destination.ip
  #
  # IP address of the destination (IPv4 or IPv6).
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # destination.address
  #
  # Some event destination addresses are defined ambiguously. The event will
  # sometimes list an IP, a domain or a unix socket. You should always store the raw
  # address in the `.address` field.
  #
  # Then it should be duplicated to `.ip` or `.domain`, depending on which one it
  # is.
  #
  # Level: Extended
  # Type: Keyword
  property address : String?

  # A chainable setter for address
  def address(new_value : String)
    @address = new_value
    self
  end

  # destination.mac
  #
  # MAC address of the destination.
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # destination.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # destination.packets
  #
  # Packets sent from the destination to the source.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 12
  # ```
  property packets : UInt64?

  # A chainable setter for packets
  def packets(new_value : UInt64)
    @packets = new_value
    self
  end

  # destination.registered_domain
  #
  # The highest registered destination domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end

  # destination.port
  #
  # Port of the destination.
  #
  # Level: Core
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end
end

struct ECS::LogEntry


  property cloud : Cloud?

  # A chainable setter for cloud
  def cloud(value : Cloud)
    @cloud = value
    self
  end

  # Initialize a new Cloud, yield it to the block
  def cloud
    @cloud = yield Cloud.new
    self
  end


end

struct ECS::LogEntry::Cloud
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # cloud.availability_zone
  #
  # Availability zone in which this host is running.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # us-east-1c
  # ```
  property availability_zone : String?

  # A chainable setter for availability_zone
  def availability_zone(new_value : String)
    @availability_zone = new_value
    self
  end

  # cloud.region
  #
  # Region in which this host is running.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # us-east-1
  # ```
  property region : String?

  # A chainable setter for region
  def region(new_value : String)
    @region = new_value
    self
  end

  # cloud.provider
  #
  # Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # aws
  # ```
  property provider : String?

  # A chainable setter for provider
  def provider(new_value : String)
    @provider = new_value
    self
  end
end

struct ECS::LogEntry


  property dns : Dns?

  # A chainable setter for dns
  def dns(value : Dns)
    @dns = value
    self
  end

  # Initialize a new Dns, yield it to the block
  def dns
    @dns = yield Dns.new
    self
  end


end

struct ECS::LogEntry::Dns
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dns.op_code
  #
  # The DNS operation code that specifies the kind of query in the message. This
  # value is set by the originator of a query and copied into the response.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # QUERY
  # ```
  property op_code : String?

  # A chainable setter for op_code
  def op_code(new_value : String)
    @op_code = new_value
    self
  end

  # dns.id
  #
  # The DNS packet identifier assigned by the program that generated the query. The
  # identifier is copied to the response.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 62111
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # dns.header_flags
  #
  # Array of 2 letter DNS header flags.
  #
  # Expected values are: AA, TC, RD, RA, AD, CD, DO.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["RD", "RA"]
  # ```
  property header_flags : String?

  # A chainable setter for header_flags
  def header_flags(new_value : String)
    @header_flags = new_value
    self
  end

  # dns.answers
  #
  # An array containing an object for each answer section returned by the server.
  #
  # The main keys that should be present in these objects are defined by ECS.
  # Records that have more information may contain more keys than what ECS defines.
  #
  # Not all DNS data sources give all details about DNS answers. At minimum, answer
  # objects must contain the `data` key. If more information is available, map as
  # much of it to ECS as possible, and add any additional fields to the answer
  # objects as custom fields.
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property answers : Hash(String, String)?

  # A chainable setter for answers
  def answers(new_value : Hash(String, String))
    @answers = new_value
    self
  end

  # dns.type
  #
  # The type of DNS event captured, query or answer.
  #
  # If your source of DNS events only gives you DNS queries, you should only create
  # dns events of type `dns.type:query`.
  #
  # If your source of DNS events gives you answers as well, you should create one
  # event per query (optionally as soon as the query is seen). And a second event
  # containing all query details as well as an array of answers.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # answer
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # dns.response_code
  #
  # The DNS response code.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # NOERROR
  # ```
  property response_code : String?

  # A chainable setter for response_code
  def response_code(new_value : String)
    @response_code = new_value
    self
  end

  # dns.resolved_ip
  #
  # Array containing all IPs seen in `answers.data`.
  #
  # The `answers` array can be difficult to use, because of the variety of data
  # formats it can contain. Extracting all IP addresses seen in there to
  # `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them
  # easier to visualize and query for.
  #
  # Level: Extended
  # Type: IP
  # Example:
  # ```
  # ["10.10.10.10", "10.10.10.11"]
  # ```
  property resolved_ip : String?

  # A chainable setter for resolved_ip
  def resolved_ip(new_value : String)
    @resolved_ip = new_value
    self
  end
end

struct ECS::LogEntry


  property container : Container?

  # A chainable setter for container
  def container(value : Container)
    @container = value
    self
  end

  # Initialize a new Container, yield it to the block
  def container
    @container = yield Container.new
    self
  end


end

struct ECS::LogEntry::Container
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # container.id
  #
  # Unique container id.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # container.labels
  #
  # Image labels.
  #
  # Level: Extended
  # Type: Object
  # Object Type: Keyword
  property labels : Hash(String, String)?

  # A chainable setter for labels
  def labels(new_value : Hash(String, String))
    @labels = new_value
    self
  end

  # container.name
  #
  # Container name.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # container.runtime
  #
  # Runtime managing this container.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # docker
  # ```
  property runtime : String?

  # A chainable setter for runtime
  def runtime(new_value : String)
    @runtime = new_value
    self
  end
end

struct ECS::LogEntry


  property dll : Dll?

  # A chainable setter for dll
  def dll(value : Dll)
    @dll = value
    self
  end

  # Initialize a new Dll, yield it to the block
  def dll
    @dll = yield Dll.new
    self
  end


end

struct ECS::LogEntry::Dll
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dll.path
  #
  # Full file path of the library.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C:\Windows\System32\kernel32.dll
  # ```
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end

  # dll.name
  #
  # Name of the library.
  #
  # This generally maps to the name of the file on disk.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # kernel32.dll
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry


  property error : Error?

  # A chainable setter for error
  def error(value : Error)
    @error = value
    self
  end

  # Initialize a new Error, yield it to the block
  def error
    @error = yield Error.new
    self
  end


end

struct ECS::LogEntry::Error
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # error.id
  #
  # Unique identifier for the error.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # error.code
  #
  # Error code describing the error.
  #
  # Level: Core
  # Type: Keyword
  property code : String?

  # A chainable setter for code
  def code(new_value : String)
    @code = new_value
    self
  end

  # error.message
  #
  # Error message.
  #
  # Level: Core
  # Type: Text
  property message : String?

  # A chainable setter for message
  def message(new_value : String)
    @message = new_value
    self
  end

  # error.stack_trace
  #
  # The stack trace of this error in plain text.
  #
  # Level: Extended
  # Type: Keyword
  property stack_trace : String?

  # A chainable setter for stack_trace
  def stack_trace(new_value : String)
    @stack_trace = new_value
    self
  end

  # error.type
  #
  # The type of the error, for example the class name of the exception.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # java.lang.NullPointerException
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end
end

struct ECS::LogEntry


  property ecs : Ecs?

  # A chainable setter for ecs
  def ecs(value : Ecs)
    @ecs = value
    self
  end

  # Initialize a new Ecs, yield it to the block
  def ecs
    @ecs = yield Ecs.new
    self
  end


end

struct ECS::LogEntry::Ecs
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # ecs.version
  #
  # ECS version this event conforms to. `ecs.version` is a required field and must
  # exist in all events.
  #
  # When querying across multiple indices -- which may conform to slightly different
  # ECS versions -- this field lets integrations adjust to the schema version of the
  # events.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # 1.0.0
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end
end

struct ECS::LogEntry


  property client : Client?

  # A chainable setter for client
  def client(value : Client)
    @client = value
    self
  end

  # Initialize a new Client, yield it to the block
  def client
    @client = yield Client.new
    self
  end


end

struct ECS::LogEntry::Client
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # client.domain
  #
  # Client domain.
  #
  # Level: Core
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # client.bytes
  #
  # Bytes sent from the client to the server.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 184
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # client.address
  #
  # Some event client addresses are defined ambiguously. The event will sometimes
  # list an IP, a domain or a unix socket. You should always store the raw address in
  # the `.address` field.
  #
  # Then it should be duplicated to `.ip` or `.domain`, depending on which one it
  # is.
  #
  # Level: Extended
  # Type: Keyword
  property address : String?

  # A chainable setter for address
  def address(new_value : String)
    @address = new_value
    self
  end

  # client.packets
  #
  # Packets sent from the client to the server.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 12
  # ```
  property packets : UInt64?

  # A chainable setter for packets
  def packets(new_value : UInt64)
    @packets = new_value
    self
  end

  # client.mac
  #
  # MAC address of the client.
  #
  # Level: Core
  # Type: Keyword
  property mac : String?

  # A chainable setter for mac
  def mac(new_value : String)
    @mac = new_value
    self
  end

  # client.ip
  #
  # IP address of the client (IPv4 or IPv6).
  #
  # Level: Core
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # client.port
  #
  # Port of the client.
  #
  # Level: Core
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end

  # client.registered_domain
  #
  # The highest registered client domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end
end

struct ECS::LogEntry


  property agent : Agent?

  # A chainable setter for agent
  def agent(value : Agent)
    @agent = value
    self
  end

  # Initialize a new Agent, yield it to the block
  def agent
    @agent = yield Agent.new
    self
  end


end

struct ECS::LogEntry::Agent
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # agent.version
  #
  # Version of the agent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # 6.0.0-rc2
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # agent.type
  #
  # Type of the agent.
  #
  # The agent type always stays the same and should be given by the agent used. In
  # case of Filebeat the agent would always be Filebeat also if two Filebeat
  # instances are run on the same machine.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # filebeat
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # agent.name
  #
  # Custom name of the agent.
  #
  # This is a name that can be given to an agent. This can be helpful if for example
  # two Filebeat instances are running on the same host but a human readable
  # separation is needed on which Filebeat instance data is coming from.
  #
  # If no name is given, the name is often left empty.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # foo
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # agent.id
  #
  # Unique identifier of this agent (if one exists).
  #
  # Example: For Beats this would be beat.id.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # 8a4f500d
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # agent.ephemeral_id
  #
  # Ephemeral identifier of this agent (if one exists).
  #
  # This id normally changes across restarts, but `agent.id` does not.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 8a4f500f
  # ```
  property ephemeral_id : String?

  # A chainable setter for ephemeral_id
  def ephemeral_id(new_value : String)
    @ephemeral_id = new_value
    self
  end
end

struct ECS::LogEntry::Destination


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Destination::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # destination.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end

  # destination.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # destination.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # destination.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end

  # destination.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end

  # destination.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # destination.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end
end

struct ECS::LogEntry::Server

  #
  # Note that Crystal does not allow redefining the `#as` method of Object.
  @[JSON::Field(key: "as")]
  property _as : As?

  # A chainable setter for @as.
  def _as(value : As)
    @_as = value
    self
  end

  # Initialize a new As, yield it to the block
  def _as
    @_as = yield As.new
    self
  end


end

struct ECS::LogEntry::Server::As
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.as.number
  #
  # Unique number allocated to the autonomous system. The autonomous system number
  # (ASN) uniquely identifies each network on the Internet.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 15169
  # ```
  property number : UInt64?

  # A chainable setter for number
  def number(new_value : UInt64)
    @number = new_value
    self
  end
end

struct ECS::LogEntry::Dll


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::Dll::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dll.hash.md5
  #
  # MD5 hash.
  #
  # Level: Extended
  # Type: Keyword
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end

  # dll.hash.sha1
  #
  # SHA1 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end

  # dll.hash.sha256
  #
  # SHA256 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end

  # dll.hash.sha512
  #
  # SHA512 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha512 : String?

  # A chainable setter for sha512
  def sha512(new_value : String)
    @sha512 = new_value
    self
  end
end

struct ECS::LogEntry::Dll


  property codesignature : CodeSignature?

  # A chainable setter for codesignature
  def codesignature(value : CodeSignature)
    @codesignature = value
    self
  end

  # Initialize a new CodeSignature, yield it to the block
  def codesignature
    @codesignature = yield CodeSignature.new
    self
  end


end

struct ECS::LogEntry::Dll::CodeSignature
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dll.code_signature.valid
  #
  # Boolean to capture if the digital signature is verified against the binary
  # content.
  #
  # Leave unpopulated if a certificate was unchecked.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property valid : Bool?

  # A chainable setter for valid
  def valid(new_value : Bool)
    @valid = new_value
    self
  end

  # dll.code_signature.trusted
  #
  # Stores the trust status of the certificate chain.
  #
  # Validating the trust of the certificate chain may be complicated, and this field
  # should only be populated by tools that actively check the status.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property trusted : Bool?

  # A chainable setter for trusted
  def trusted(new_value : Bool)
    @trusted = new_value
    self
  end

  # dll.code_signature.subject_name
  #
  # Subject name of the code signer
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property subject_name : String?

  # A chainable setter for subject_name
  def subject_name(new_value : String)
    @subject_name = new_value
    self
  end

  # dll.code_signature.exists
  #
  # Boolean to capture if a signature is present.
  #
  # Level: Core
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property exists : Bool?

  # A chainable setter for exists
  def exists(new_value : Bool)
    @exists = new_value
    self
  end

  # dll.code_signature.status
  #
  # Additional information about the certificate status.
  #
  # This is useful for logging cryptographic errors with the certificate validity or
  # trust status. Leave unpopulated if the validity or trust of the certificate was
  # unchecked.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ERROR_UNTRUSTED_ROOT
  # ```
  property status : String?

  # A chainable setter for status
  def status(new_value : String)
    @status = new_value
    self
  end
end

struct ECS::LogEntry::Process


  property thread : Thread?

  # A chainable setter for thread
  def thread(value : Thread)
    @thread = value
    self
  end

  # Initialize a new Thread, yield it to the block
  def thread
    @thread = yield Thread.new
    self
  end


end

struct ECS::LogEntry::Process::Thread
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.thread.id
  #
  # Thread ID.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4242
  # ```
  property id : UInt64?

  # A chainable setter for id
  def id(new_value : UInt64)
    @id = new_value
    self
  end

  # process.thread.name
  #
  # Thread name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # thread-0
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Destination

  #
  # Note that Crystal does not allow redefining the `#as` method of Object.
  @[JSON::Field(key: "as")]
  property _as : As?

  # A chainable setter for @as.
  def _as(value : As)
    @_as = value
    self
  end

  # Initialize a new As, yield it to the block
  def _as
    @_as = yield As.new
    self
  end


end

struct ECS::LogEntry::Destination::As
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.as.number
  #
  # Unique number allocated to the autonomous system. The autonomous system number
  # (ASN) uniquely identifies each network on the Internet.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 15169
  # ```
  property number : UInt64?

  # A chainable setter for number
  def number(new_value : UInt64)
    @number = new_value
    self
  end
end

struct ECS::LogEntry::Server


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Server::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end

  # server.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end

  # server.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # server.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # server.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end

  # server.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # server.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # server.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end
end

struct ECS::LogEntry::Process


  property pe : Pe?

  # A chainable setter for pe
  def pe(value : Pe)
    @pe = value
    self
  end

  # Initialize a new Pe, yield it to the block
  def pe
    @pe = yield Pe.new
    self
  end


end

struct ECS::LogEntry::Process::Pe
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.pe.product
  #
  # Internal product name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft® Windows® Operating System
  # ```
  property product : String?

  # A chainable setter for product
  def product(new_value : String)
    @product = new_value
    self
  end

  # process.pe.original_file_name
  #
  # Internal name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MSPAINT.EXE
  # ```
  property original_file_name : String?

  # A chainable setter for original_file_name
  def original_file_name(new_value : String)
    @original_file_name = new_value
    self
  end

  # process.pe.imphash
  #
  # A hash of the imports in a PE file. An imphash -- or import hash -- can be used
  # to fingerprint binaries even after recompilation or other code-level
  # transformations have occurred, which would change more traditional hash values.
  #
  # Learn more at
  # https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0c6803c4e922103c4dca5963aad36ddf
  # ```
  property imphash : String?

  # A chainable setter for imphash
  def imphash(new_value : String)
    @imphash = new_value
    self
  end

  # process.pe.file_version
  #
  # Internal version of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 6.3.9600.17415
  # ```
  property file_version : String?

  # A chainable setter for file_version
  def file_version(new_value : String)
    @file_version = new_value
    self
  end

  # process.pe.description
  #
  # Internal description of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Paint
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # process.pe.company
  #
  # Internal company name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property company : String?

  # A chainable setter for company
  def company(new_value : String)
    @company = new_value
    self
  end

  # process.pe.architecture
  #
  # CPU architecture target for the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # x64
  # ```
  property architecture : String?

  # A chainable setter for architecture
  def architecture(new_value : String)
    @architecture = new_value
    self
  end
end

struct ECS::LogEntry::Service


  property node : Node?

  # A chainable setter for node
  def node(value : Node)
    @node = value
    self
  end

  # Initialize a new Node, yield it to the block
  def node
    @node = yield Node.new
    self
  end


end

struct ECS::LogEntry::Service::Node
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # service.node.name
  #
  # Name of a service node.
  #
  # This allows for two nodes of the same service running on the same host to be
  # differentiated. Therefore, `service.node.name` should typically be unique across
  # nodes of a given service.
  #
  # In the case of Elasticsearch, the `service.node.name` could contain the unique
  # node name within the Elasticsearch cluster. In cases where the service doesn't
  # have the concept of a node name, the host name or container name can be used to
  # distinguish running instances that make up this service. If those do not provide
  # uniqueness (e.g. multiple instances of the service running on the same host) -
  # the node name can be manually set.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # instance-0000000016
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Destination


  property nat : Nat?

  # A chainable setter for nat
  def nat(value : Nat)
    @nat = value
    self
  end

  # Initialize a new Nat, yield it to the block
  def nat
    @nat = yield Nat.new
    self
  end


end

struct ECS::LogEntry::Destination::Nat
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.nat.ip
  #
  # Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
  #
  # Typically used with load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # destination.nat.port
  #
  # Port the source session is translated to by NAT Device.
  #
  # Typically used with load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end
end

struct ECS::LogEntry::Container


  property image : Image?

  # A chainable setter for image
  def image(value : Image)
    @image = value
    self
  end

  # Initialize a new Image, yield it to the block
  def image
    @image = yield Image.new
    self
  end


end

struct ECS::LogEntry::Container::Image
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # container.image.tag
  #
  # Container image tags.
  #
  # Level: Extended
  # Type: Keyword
  property tag : String?

  # A chainable setter for tag
  def tag(new_value : String)
    @tag = new_value
    self
  end

  # container.image.name
  #
  # Name of the image the container was built on.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Source

  #
  # Note that Crystal does not allow redefining the `#as` method of Object.
  @[JSON::Field(key: "as")]
  property _as : As?

  # A chainable setter for @as.
  def _as(value : As)
    @_as = value
    self
  end

  # Initialize a new As, yield it to the block
  def _as
    @_as = yield As.new
    self
  end


end

struct ECS::LogEntry::Source::As
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.as.number
  #
  # Unique number allocated to the autonomous system. The autonomous system number
  # (ASN) uniquely identifies each network on the Internet.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 15169
  # ```
  property number : UInt64?

  # A chainable setter for number
  def number(new_value : UInt64)
    @number = new_value
    self
  end
end

struct ECS::LogEntry::Server


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::Server::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # server.user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # server.user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # server.user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # server.user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # server.user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end
end

struct ECS::LogEntry::Destination


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::Destination::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # destination.user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # destination.user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # destination.user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # destination.user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # destination.user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Server


  property nat : Nat?

  # A chainable setter for nat
  def nat(value : Nat)
    @nat = value
    self
  end

  # Initialize a new Nat, yield it to the block
  def nat
    @nat = yield Nat.new
    self
  end


end

struct ECS::LogEntry::Server::Nat
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.nat.ip
  #
  # Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
  #
  # Typically used with load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # server.nat.port
  #
  # Translated port of destination based NAT sessions (e.g. internet to private DMZ)
  #
  # Typically used with load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end
end

struct ECS::LogEntry::Registry


  property data : Data?

  # A chainable setter for data
  def data(value : Data)
    @data = value
    self
  end

  # Initialize a new Data, yield it to the block
  def data
    @data = yield Data.new
    self
  end


end

struct ECS::LogEntry::Registry::Data
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # registry.data.type
  #
  # Standard registry type for encoding contents
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # REG_SZ
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # registry.data.strings
  #
  # Content when writing string types.
  #
  # Populated as an array when writing string data to the registry. For single
  # string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one
  # string. For sequences of string with REG_MULTI_SZ, this array will be variable
  # length. For numeric data, such as REG_DWORD and REG_QWORD, this should be
  # populated with the decimal representation (e.g `"1"`).
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # ["C:\rta\red_ttp\bin\myapp.exe"]
  # ```
  property strings : String?

  # A chainable setter for strings
  def strings(new_value : String)
    @strings = new_value
    self
  end

  # registry.data.bytes
  #
  # Original bytes written with base64 encoding.
  #
  # For Windows registry operations, such as SetValueEx and RegQueryValueEx, this
  # corresponds to the data pointed by `lp_data`. This is optional but provides
  # better recoverability and should be populated for REG_BINARY encoded values.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
  # ```
  property bytes : String?

  # A chainable setter for bytes
  def bytes(new_value : String)
    @bytes = new_value
    self
  end
end

struct ECS::LogEntry::Source


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Source::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end

  # source.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end

  # source.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # source.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # source.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end

  # source.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # source.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # source.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end
end

struct ECS::LogEntry::Client


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Client::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # client.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end

  # client.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # client.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # client.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end

  # client.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # client.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end

  # client.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end
end

struct ECS::LogEntry::Client


  property nat : Nat?

  # A chainable setter for nat
  def nat(value : Nat)
    @nat = value
    self
  end

  # Initialize a new Nat, yield it to the block
  def nat
    @nat = yield Nat.new
    self
  end


end

struct ECS::LogEntry::Client::Nat
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.nat.ip
  #
  # Translated IP of source based NAT sessions (e.g. internal client to internet).
  #
  # Typically connections traversing load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end

  # client.nat.port
  #
  # Translated port of source based NAT sessions (e.g. internal client to internet).
  #
  # Typically connections traversing load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end
end

struct ECS::LogEntry::Client


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::Client::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # client.user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # client.user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # client.user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # client.user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # client.user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Tls


  property server : Server?

  # A chainable setter for server
  def server(value : Server)
    @server = value
    self
  end

  # Initialize a new Server, yield it to the block
  def server
    @server = yield Server.new
    self
  end


end

struct ECS::LogEntry::Tls::Server
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.server.subject
  #
  # Subject of the x.509 certificate presented by the server.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CN=www.mydomain.com, OU=Infrastructure Team, DC=mydomain, DC=com
  # ```
  property subject : String?

  # A chainable setter for subject
  def subject(new_value : String)
    @subject = new_value
    self
  end

  # tls.server.not_before
  #
  # Timestamp indicating when server certificate is first considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 1970-01-01T00:00:00.000Z
  # ```
  property not_before : Time?

  # A chainable setter for not_before
  def not_before(new_value : Time)
    @not_before = new_value
    self
  end

  # tls.server.not_after
  #
  # Timestamp indicating when server certificate is no longer considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2021-01-01T00:00:00.000Z
  # ```
  property not_after : Time?

  # A chainable setter for not_after
  def not_after(new_value : Time)
    @not_after = new_value
    self
  end

  # tls.server.ja3s
  #
  # A hash that identifies servers based on how they perform an SSL/TLS handshake.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 394441ab65754e2207b1e1b457b3641d
  # ```
  property ja3s : String?

  # A chainable setter for ja3s
  def ja3s(new_value : String)
    @ja3s = new_value
    self
  end

  # tls.server.issuer
  #
  # Subject of the issuer of the x.509 certificate presented by the server.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
  # ```
  property issuer : String?

  # A chainable setter for issuer
  def issuer(new_value : String)
    @issuer = new_value
    self
  end

  # tls.server.certificate_chain
  #
  # Array of PEM-encoded certificates that make up the certificate chain offered by
  # the server. This is usually mutually-exclusive of `server.certificate` since that
  # value should be the first certificate in the chain.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["MII...", "MII..."]
  # ```
  property certificate_chain : String?

  # A chainable setter for certificate_chain
  def certificate_chain(new_value : String)
    @certificate_chain = new_value
    self
  end

  # tls.server.certificate
  #
  # PEM-encoded stand-alone certificate offered by the server. This is usually
  # mutually-exclusive of `server.certificate_chain` since this value also exists in
  # that list.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MII...
  # ```
  property certificate : String?

  # A chainable setter for certificate
  def certificate(new_value : String)
    @certificate = new_value
    self
  end
end

struct ECS::LogEntry::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Vulnerability


  property score : Score?

  # A chainable setter for score
  def score(value : Score)
    @score = value
    self
  end

  # Initialize a new Score, yield it to the block
  def score
    @score = yield Score.new
    self
  end


end

struct ECS::LogEntry::Vulnerability::Score
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # vulnerability.score.version
  #
  # The National Vulnerability Database (NVD) provides qualitative severity rankings
  # of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the
  # severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0
  # specification.
  #
  # CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit
  # organization, whose mission is to help computer security incident response teams
  # across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 2.0
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # vulnerability.score.temporal
  #
  # Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
  #
  # Temporal scores cover an assessment for code maturity, remediation level, and
  # confidence. For example (https://www.first.org/cvss/specification-document)
  #
  # Level: Extended
  # Type: Float
  property temporal : Float64?

  # A chainable setter for temporal
  def temporal(new_value : Float64)
    @temporal = new_value
    self
  end

  # vulnerability.score.environmental
  #
  # Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
  #
  # Environmental scores cover an assessment for any modified Base metrics,
  # confidentiality, integrity, and availability requirements. For example
  # (https://www.first.org/cvss/specification-document)
  #
  # Level: Extended
  # Type: Float
  # Example:
  # ```
  # 5.5
  # ```
  property environmental : Float64?

  # A chainable setter for environmental
  def environmental(new_value : Float64)
    @environmental = new_value
    self
  end

  # vulnerability.score.base
  #
  # Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
  #
  # Base scores cover an assessment for exploitability metrics (attack vector,
  # complexity, privileges, and user interaction), impact metrics (confidentiality,
  # integrity, and availability), and scope. For example
  # (https://www.first.org/cvss/specification-document)
  #
  # Level: Extended
  # Type: Float
  # Example:
  # ```
  # 5.5
  # ```
  property base : Float64?

  # A chainable setter for base
  def base(new_value : Float64)
    @base = new_value
    self
  end
end

struct ECS::LogEntry::Vulnerability


  property scanner : Scanner?

  # A chainable setter for scanner
  def scanner(value : Scanner)
    @scanner = value
    self
  end

  # Initialize a new Scanner, yield it to the block
  def scanner
    @scanner = yield Scanner.new
    self
  end


end

struct ECS::LogEntry::Vulnerability::Scanner
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # vulnerability.scanner.vendor
  #
  # The name of the vulnerability scanner vendor.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Tenable
  # ```
  property vendor : String?

  # A chainable setter for vendor
  def vendor(new_value : String)
    @vendor = new_value
    self
  end
end

struct ECS::LogEntry::Agent


  property build : Build?

  # A chainable setter for build
  def build(value : Build)
    @build = value
    self
  end

  # Initialize a new Build, yield it to the block
  def build
    @build = yield Build.new
    self
  end


end

struct ECS::LogEntry::Agent::Build
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # agent.build.original
  #
  # Extended build information for the agent.
  #
  # This field is intended to contain any build information that a data source may
  # provide, no specific formatting is required.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c built 2020-02-05 23:10:10 +0000 UTC]
  # ```
  property original : String?

  # A chainable setter for original
  def original(new_value : String)
    @original = new_value
    self
  end
end

struct ECS::LogEntry::Client

  #
  # Note that Crystal does not allow redefining the `#as` method of Object.
  @[JSON::Field(key: "as")]
  property _as : As?

  # A chainable setter for @as.
  def _as(value : As)
    @_as = value
    self
  end

  # Initialize a new As, yield it to the block
  def _as
    @_as = yield As.new
    self
  end


end

struct ECS::LogEntry::Client::As
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.as.number
  #
  # Unique number allocated to the autonomous system. The autonomous system number
  # (ASN) uniquely identifies each network on the Internet.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 15169
  # ```
  property number : UInt64?

  # A chainable setter for number
  def number(new_value : UInt64)
    @number = new_value
    self
  end
end

struct ECS::LogEntry::UserAgent


  property os : Os?

  # A chainable setter for os
  def os(value : Os)
    @os = value
    self
  end

  # Initialize a new Os, yield it to the block
  def os
    @os = yield Os.new
    self
  end


end

struct ECS::LogEntry::UserAgent::Os
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # user_agent.os.version
  #
  # Operating system version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10.14.1
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # user_agent.os.platform
  #
  # Operating system platform (such centos, ubuntu, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # darwin
  # ```
  property platform : String?

  # A chainable setter for platform
  def platform(new_value : String)
    @platform = new_value
    self
  end

  # user_agent.os.name
  #
  # Operating system name, without the version.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS X
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # user_agent.os.kernel
  #
  # Operating system kernel version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 4.4.0-112-generic
  # ```
  property kernel : String?

  # A chainable setter for kernel
  def kernel(new_value : String)
    @kernel = new_value
    self
  end

  # user_agent.os.full
  #
  # Operating system name, including the version or code name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS Mojave
  # ```
  property full : String?

  # A chainable setter for full
  def full(new_value : String)
    @full = new_value
    self
  end

  # user_agent.os.family
  #
  # OS family (such as redhat, debian, freebsd, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # debian
  # ```
  property family : String?

  # A chainable setter for family
  def family(new_value : String)
    @family = new_value
    self
  end
end

struct ECS::LogEntry::UserAgent


  property device : Device?

  # A chainable setter for device
  def device(value : Device)
    @device = value
    self
  end

  # Initialize a new Device, yield it to the block
  def device
    @device = yield Device.new
    self
  end


end

struct ECS::LogEntry::UserAgent::Device
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # user_agent.device.name
  #
  # Name of the device.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # iPhone
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Source


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::Source::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # source.user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # source.user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # source.user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # source.user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # source.user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Cloud


  property instance : Instance?

  # A chainable setter for instance
  def instance(value : Instance)
    @instance = value
    self
  end

  # Initialize a new Instance, yield it to the block
  def instance
    @instance = yield Instance.new
    self
  end


end

struct ECS::LogEntry::Cloud::Instance
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # cloud.instance.name
  #
  # Instance name of the host machine.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # cloud.instance.id
  #
  # Instance ID of the host machine.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # i-1234567890abcdef0
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::File


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::File::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.hash.sha1
  #
  # SHA1 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end

  # file.hash.md5
  #
  # MD5 hash.
  #
  # Level: Extended
  # Type: Keyword
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end

  # file.hash.sha512
  #
  # SHA512 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha512 : String?

  # A chainable setter for sha512
  def sha512(new_value : String)
    @sha512 = new_value
    self
  end

  # file.hash.sha256
  #
  # SHA256 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end
end

struct ECS::LogEntry::Cloud


  property machine : Machine?

  # A chainable setter for machine
  def machine(value : Machine)
    @machine = value
    self
  end

  # Initialize a new Machine, yield it to the block
  def machine
    @machine = yield Machine.new
    self
  end


end

struct ECS::LogEntry::Cloud::Machine
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # cloud.machine.type
  #
  # Machine type of the host machine.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # t2.medium
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end
end

struct ECS::LogEntry::Cloud


  property project : Project?

  # A chainable setter for project
  def project(value : Project)
    @project = value
    self
  end

  # Initialize a new Project, yield it to the block
  def project
    @project = yield Project.new
    self
  end


end

struct ECS::LogEntry::Cloud::Project
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # cloud.project.id
  #
  # The cloud project identifier.
  #
  # Examples: Google Cloud Project id, Azure Project id.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # my-project
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # cloud.project.name
  #
  # The cloud project name.
  #
  # Examples: Google Cloud Project name, Azure Project name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # my project
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Source


  property nat : Nat?

  # A chainable setter for nat
  def nat(value : Nat)
    @nat = value
    self
  end

  # Initialize a new Nat, yield it to the block
  def nat
    @nat = yield Nat.new
    self
  end


end

struct ECS::LogEntry::Source::Nat
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.nat.port
  #
  # Translated port of source based NAT sessions. (e.g. internal client to internet)
  #
  # Typically used with load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: Long
  property port : UInt64?

  # A chainable setter for port
  def port(new_value : UInt64)
    @port = new_value
    self
  end

  # source.nat.ip
  #
  # Translated ip of source based NAT sessions (e.g. internal client to internet)
  #
  # Typically connections traversing load balancers, firewalls, or routers.
  #
  # Level: Extended
  # Type: IP
  property ip : String?

  # A chainable setter for ip
  def ip(new_value : String)
    @ip = new_value
    self
  end
end

struct ECS::LogEntry::Cloud


  property account : Account?

  # A chainable setter for account
  def account(value : Account)
    @account = value
    self
  end

  # Initialize a new Account, yield it to the block
  def account
    @account = yield Account.new
    self
  end


end

struct ECS::LogEntry::Cloud::Account
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # cloud.account.id
  #
  # The cloud account or organization id used to identify different entities in a
  # multi-tenant environment.
  #
  # Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 666777888999
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # cloud.account.name
  #
  # The cloud account name or alias used to identify different entities in a
  # multi-tenant environment.
  #
  # Examples: AWS account name, Google Cloud ORG display name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # elastic-dev
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Tls


  property client : Client?

  # A chainable setter for client
  def client(value : Client)
    @client = value
    self
  end

  # Initialize a new Client, yield it to the block
  def client
    @client = yield Client.new
    self
  end


end

struct ECS::LogEntry::Tls::Client
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.client.supported_ciphers
  #
  # Array of ciphers offered by the client during the client hello.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "..."]
  # ```
  property supported_ciphers : String?

  # A chainable setter for supported_ciphers
  def supported_ciphers(new_value : String)
    @supported_ciphers = new_value
    self
  end

  # tls.client.subject
  #
  # Distinguished name of subject of the x.509 certificate presented by the client.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CN=myclient, OU=Documentation Team, DC=mydomain, DC=com
  # ```
  property subject : String?

  # A chainable setter for subject
  def subject(new_value : String)
    @subject = new_value
    self
  end

  # tls.client.server_name
  #
  # Also called an SNI, this tells the server which hostname to which the client is
  # attempting to connect. When this value is available, it should get copied to
  # `destination.domain`.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.elastic.co
  # ```
  property server_name : String?

  # A chainable setter for server_name
  def server_name(new_value : String)
    @server_name = new_value
    self
  end

  # tls.client.not_before
  #
  # Date/Time indicating when client certificate is first considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 1970-01-01T00:00:00.000Z
  # ```
  property not_before : Time?

  # A chainable setter for not_before
  def not_before(new_value : Time)
    @not_before = new_value
    self
  end

  # tls.client.not_after
  #
  # Date/Time indicating when client certificate is no longer considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2021-01-01T00:00:00.000Z
  # ```
  property not_after : Time?

  # A chainable setter for not_after
  def not_after(new_value : Time)
    @not_after = new_value
    self
  end

  # tls.client.ja3
  #
  # A hash that identifies clients based on how they perform an SSL/TLS handshake.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # d4e5b18d6b55c71272893221c96ba240
  # ```
  property ja3 : String?

  # A chainable setter for ja3
  def ja3(new_value : String)
    @ja3 = new_value
    self
  end

  # tls.client.issuer
  #
  # Distinguished name of subject of the issuer of the x.509 certificate presented
  # by the client.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
  # ```
  property issuer : String?

  # A chainable setter for issuer
  def issuer(new_value : String)
    @issuer = new_value
    self
  end

  # tls.client.certificate_chain
  #
  # Array of PEM-encoded certificates that make up the certificate chain offered by
  # the client. This is usually mutually-exclusive of `client.certificate` since that
  # value should be the first certificate in the chain.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["MII...", "MII..."]
  # ```
  property certificate_chain : String?

  # A chainable setter for certificate_chain
  def certificate_chain(new_value : String)
    @certificate_chain = new_value
    self
  end

  # tls.client.certificate
  #
  # PEM-encoded stand-alone certificate offered by the client. This is usually
  # mutually-exclusive of `client.certificate_chain` since this value also exists in
  # that list.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MII...
  # ```
  property certificate : String?

  # A chainable setter for certificate
  def certificate(new_value : String)
    @certificate = new_value
    self
  end
end

struct ECS::LogEntry::Threat


  property technique : Technique?

  # A chainable setter for technique
  def technique(value : Technique)
    @technique = value
    self
  end

  # Initialize a new Technique, yield it to the block
  def technique
    @technique = yield Technique.new
    self
  end


end

struct ECS::LogEntry::Threat::Technique
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # threat.technique.reference
  #
  # The reference url of technique used by this tactic. You can use the Mitre ATT&CK
  # Matrix Tactic categorization, for example. (ex.
  # https://attack.mitre.org/techniques/T1499/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://attack.mitre.org/techniques/T1499/
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # threat.technique.name
  #
  # The name of technique used by this tactic. You can use the Mitre ATT&CK Matrix
  # Tactic categorization, for example. (ex.
  # https://attack.mitre.org/techniques/T1499/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # endpoint denial of service
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # threat.technique.id
  #
  # The id of technique used by this tactic. You can use the Mitre ATT&CK Matrix
  # Tactic categorization, for example. (ex.
  # https://attack.mitre.org/techniques/T1499/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # T1499
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Threat


  property tactic : Tactic?

  # A chainable setter for tactic
  def tactic(value : Tactic)
    @tactic = value
    self
  end

  # Initialize a new Tactic, yield it to the block
  def tactic
    @tactic = yield Tactic.new
    self
  end


end

struct ECS::LogEntry::Threat::Tactic
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # threat.tactic.reference
  #
  # The reference url of tactic used by this threat. You can use the Mitre ATT&CK
  # Matrix Tactic categorization, for example. (ex.
  # https://attack.mitre.org/tactics/TA0040/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://attack.mitre.org/tactics/TA0040/
  # ```
  property reference : String?

  # A chainable setter for reference
  def reference(new_value : String)
    @reference = new_value
    self
  end

  # threat.tactic.name
  #
  # Name of the type of tactic used by this threat. You can use the Mitre ATT&CK
  # Matrix Tactic categorization, for example. (ex.
  # https://attack.mitre.org/tactics/TA0040/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # impact
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # threat.tactic.id
  #
  # The id of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic
  # categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # TA0040
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Process


  property parent : Parent?

  # A chainable setter for parent
  def parent(value : Parent)
    @parent = value
    self
  end

  # Initialize a new Parent, yield it to the block
  def parent
    @parent = yield Parent.new
    self
  end


end

struct ECS::LogEntry::Process::Parent
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.parent.working_directory
  #
  # The working directory of the process.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /home/alice
  # ```
  property working_directory : String?

  # A chainable setter for working_directory
  def working_directory(new_value : String)
    @working_directory = new_value
    self
  end

  # process.parent.executable
  #
  # Absolute path to the process executable.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /usr/bin/ssh
  # ```
  property executable : String?

  # A chainable setter for executable
  def executable(new_value : String)
    @executable = new_value
    self
  end

  # process.parent.entity_id
  #
  # Unique identifier for the process.
  #
  # The implementation of this is specified by the data source, but some examples of
  # what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a
  # hash of some uniquely identifying components of a process.
  #
  # Constructing a globally unique identifier is a common practice to mitigate PID
  # reuse as well as to identify a specific process over time, across multiple
  # monitored hosts.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # c2c455d9f99375d
  # ```
  property entity_id : String?

  # A chainable setter for entity_id
  def entity_id(new_value : String)
    @entity_id = new_value
    self
  end

  # process.parent.command_line
  #
  # Full command line that started the process, including the absolute path to the
  # executable, and all arguments.
  #
  # Some arguments may be filtered to protect sensitive information.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /usr/bin/ssh -l user 10.0.0.16
  # ```
  property command_line : String?

  # A chainable setter for command_line
  def command_line(new_value : String)
    @command_line = new_value
    self
  end

  # process.parent.args_count
  #
  # Length of the process.args array.
  #
  # This field can be useful for querying or performing bucket analysis on how many
  # arguments were provided to start a process. More arguments may be an indication
  # of suspicious activity.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4
  # ```
  property args_count : UInt64?

  # A chainable setter for args_count
  def args_count(new_value : UInt64)
    @args_count = new_value
    self
  end

  # process.parent.args
  #
  # Array of process arguments.
  #
  # May be filtered to protect sensitive information.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ["ssh", "-l", "user", "10.0.0.16"]
  # ```
  property args : String?

  # A chainable setter for args
  def args(new_value : String)
    @args = new_value
    self
  end

  # process.parent.exit_code
  #
  # The exit code of the process, if this is a termination event.
  #
  # The field should be absent if there is no exit code for the event (e.g. process
  # start).
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 137
  # ```
  property exit_code : UInt64?

  # A chainable setter for exit_code
  def exit_code(new_value : UInt64)
    @exit_code = new_value
    self
  end

  # process.parent.pid
  #
  # Process id.
  #
  # Level: Core
  # Type: Long
  # Example:
  # ```
  # 4242
  # ```
  property pid : UInt64?

  # A chainable setter for pid
  def pid(new_value : UInt64)
    @pid = new_value
    self
  end

  # process.parent.pgid
  #
  # Identifier of the group of processes the process belongs to.
  #
  # Level: Extended
  # Type: Long
  property pgid : UInt64?

  # A chainable setter for pgid
  def pgid(new_value : UInt64)
    @pgid = new_value
    self
  end

  # process.parent.ppid
  #
  # Parent process' pid.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4241
  # ```
  property ppid : UInt64?

  # A chainable setter for ppid
  def ppid(new_value : UInt64)
    @ppid = new_value
    self
  end

  # process.parent.start
  #
  # The time the process started.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2016-05-23T08:05:34.853Z
  # ```
  property start : Time?

  # A chainable setter for start
  def start(new_value : Time)
    @start = new_value
    self
  end

  # process.parent.name
  #
  # Process name.
  #
  # Sometimes called program name or similar.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ssh
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # process.parent.title
  #
  # Process title.
  #
  # The proctitle, some times the same as process name. Can also be different: for
  # example a browser setting its title to the web page currently opened.
  #
  # Level: Extended
  # Type: Keyword
  property title : String?

  # A chainable setter for title
  def title(new_value : String)
    @title = new_value
    self
  end

  # process.parent.uptime
  #
  # Seconds the process has been up.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 1325
  # ```
  property uptime : UInt64?

  # A chainable setter for uptime
  def uptime(new_value : UInt64)
    @uptime = new_value
    self
  end
end

struct ECS::LogEntry::Host


  property os : Os?

  # A chainable setter for os
  def os(value : Os)
    @os = value
    self
  end

  # Initialize a new Os, yield it to the block
  def os
    @os = yield Os.new
    self
  end


end

struct ECS::LogEntry::Host::Os
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # host.os.full
  #
  # Operating system name, including the version or code name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS Mojave
  # ```
  property full : String?

  # A chainable setter for full
  def full(new_value : String)
    @full = new_value
    self
  end

  # host.os.kernel
  #
  # Operating system kernel version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 4.4.0-112-generic
  # ```
  property kernel : String?

  # A chainable setter for kernel
  def kernel(new_value : String)
    @kernel = new_value
    self
  end

  # host.os.name
  #
  # Operating system name, without the version.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS X
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # host.os.platform
  #
  # Operating system platform (such centos, ubuntu, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # darwin
  # ```
  property platform : String?

  # A chainable setter for platform
  def platform(new_value : String)
    @platform = new_value
    self
  end

  # host.os.version
  #
  # Operating system version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10.14.1
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # host.os.family
  #
  # OS family (such as redhat, debian, freebsd, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # debian
  # ```
  property family : String?

  # A chainable setter for family
  def family(new_value : String)
    @family = new_value
    self
  end
end

struct ECS::LogEntry::Host


  property user : User?

  # A chainable setter for user
  def user(value : User)
    @user = value
    self
  end

  # Initialize a new User, yield it to the block
  def user
    @user = yield User.new
    self
  end


end

struct ECS::LogEntry::Host::User
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # host.user.domain
  #
  # Name of the directory the user is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # host.user.email
  #
  # User email address.
  #
  # Level: Extended
  # Type: Keyword
  property email : String?

  # A chainable setter for email
  def email(new_value : String)
    @email = new_value
    self
  end

  # host.user.full_name
  #
  # User's full name, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Albert Einstein
  # ```
  property full_name : String?

  # A chainable setter for full_name
  def full_name(new_value : String)
    @full_name = new_value
    self
  end

  # host.user.hash
  #
  # Unique user hash to correlate information for a user in anonymized form.
  #
  # Useful if `user.id` or `user.name` contain confidential information and cannot
  # be used.
  #
  # Level: Extended
  # Type: Keyword
  property hash : String?

  # A chainable setter for hash
  def hash(new_value : String)
    @hash = new_value
    self
  end

  # host.user.id
  #
  # Unique identifier of the user.
  #
  # Level: Core
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # host.user.name
  #
  # Short name or login of the user.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # albert
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Http


  property request : Request?

  # A chainable setter for request
  def request(value : Request)
    @request = value
    self
  end

  # Initialize a new Request, yield it to the block
  def request
    @request = yield Request.new
    self
  end


end

struct ECS::LogEntry::Http::Request
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # http.request.bytes
  #
  # Total size in bytes of the request (body and headers).
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 1437
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # http.request.method
  #
  # HTTP request method.
  #
  # Prior to ECS 1.6.0 the following guidance was provided:
  #
  # "The field value must be normalized to lowercase for querying."
  #
  # As of ECS 1.6.0, the guidance is deprecated because the original case of the
  # method may be useful in anomaly detection. Original case will be mandated in ECS
  # 2.0.0
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # GET, POST, PUT, PoST
  # ```
  property method : String?

  # A chainable setter for method
  def method(new_value : String)
    @method = new_value
    self
  end

  # http.request.referrer
  #
  # Referrer for this HTTP request.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # https://blog.example.com/
  # ```
  property referrer : String?

  # A chainable setter for referrer
  def referrer(new_value : String)
    @referrer = new_value
    self
  end
end

struct ECS::LogEntry::Http


  property response : Response?

  # A chainable setter for response
  def response(value : Response)
    @response = value
    self
  end

  # Initialize a new Response, yield it to the block
  def response
    @response = yield Response.new
    self
  end


end

struct ECS::LogEntry::Http::Response
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # http.response.bytes
  #
  # Total size in bytes of the response (body and headers).
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 1437
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end

  # http.response.status_code
  #
  # HTTP response status code.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 404
  # ```
  property status_code : UInt64?

  # A chainable setter for status_code
  def status_code(new_value : UInt64)
    @status_code = new_value
    self
  end
end

struct ECS::LogEntry::Observer


  property ingress : Ingress?

  # A chainable setter for ingress
  def ingress(value : Ingress)
    @ingress = value
    self
  end

  # Initialize a new Ingress, yield it to the block
  def ingress
    @ingress = yield Ingress.new
    self
  end


end

struct ECS::LogEntry::Observer::Ingress
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.ingress.zone
  #
  # Network zone of incoming traffic as reported by the observer to categorize the
  # source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DMZ
  # ```
  property zone : String?

  # A chainable setter for zone
  def zone(new_value : String)
    @zone = new_value
    self
  end
end

struct ECS::LogEntry::Observer


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Observer::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end

  # observer.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # observer.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end

  # observer.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # observer.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # observer.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end

  # observer.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end
end

struct ECS::LogEntry::Observer


  property egress : Egress?

  # A chainable setter for egress
  def egress(value : Egress)
    @egress = value
    self
  end

  # Initialize a new Egress, yield it to the block
  def egress
    @egress = yield Egress.new
    self
  end


end

struct ECS::LogEntry::Observer::Egress
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.egress.zone
  #
  # Network zone of outbound traffic as reported by the observer to categorize the
  # destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Public_Internet
  # ```
  property zone : String?

  # A chainable setter for zone
  def zone(new_value : String)
    @zone = new_value
    self
  end
end

struct ECS::LogEntry::Network


  property vlan : Vlan?

  # A chainable setter for vlan
  def vlan(value : Vlan)
    @vlan = value
    self
  end

  # Initialize a new Vlan, yield it to the block
  def vlan
    @vlan = yield Vlan.new
    self
  end


end

struct ECS::LogEntry::Network::Vlan
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # network.vlan.name
  #
  # Optional VLAN name as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # network.vlan.id
  #
  # VLAN ID as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Log


  property syslog : Syslog?

  # A chainable setter for syslog
  def syslog(value : Syslog)
    @syslog = value
    self
  end

  # Initialize a new Syslog, yield it to the block
  def syslog
    @syslog = yield Syslog.new
    self
  end


end

struct ECS::LogEntry::Log::Syslog
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.syslog.priority
  #
  # Syslog numeric priority of the event, if available.
  #
  # According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This
  # number is therefore expected to contain a value between 0 and 191.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 135
  # ```
  property priority : UInt64?

  # A chainable setter for priority
  def priority(new_value : UInt64)
    @priority = new_value
    self
  end
end

struct ECS::LogEntry::Log


  property origin : Origin?

  # A chainable setter for origin
  def origin(value : Origin)
    @origin = value
    self
  end

  # Initialize a new Origin, yield it to the block
  def origin
    @origin = yield Origin.new
    self
  end


end

struct ECS::LogEntry::Log::Origin
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.origin.function
  #
  # The name of the function or method which originated the log event.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # init
  # ```
  property function : String?

  # A chainable setter for function
  def function(new_value : String)
    @function = new_value
    self
  end
end

struct ECS::LogEntry::Log


  property file : File?

  # A chainable setter for file
  def file(value : File)
    @file = value
    self
  end

  # Initialize a new File, yield it to the block
  def file
    @file = yield File.new
    self
  end


end

struct ECS::LogEntry::Log::File
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.file.path
  #
  # Full path to the log file this event came from, including the file name. It
  # should include the drive letter, when appropriate.
  #
  # If the event wasn't read from a log file, do not populate this field.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # /var/log/fun-times.log
  # ```
  property path : String?

  # A chainable setter for path
  def path(new_value : String)
    @path = new_value
    self
  end
end

struct ECS::LogEntry::Host


  property geo : Geo?

  # A chainable setter for geo
  def geo(value : Geo)
    @geo = value
    self
  end

  # Initialize a new Geo, yield it to the block
  def geo
    @geo = yield Geo.new
    self
  end


end

struct ECS::LogEntry::Host::Geo
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # host.geo.region_name
  #
  # Region name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Quebec
  # ```
  property region_name : String?

  # A chainable setter for region_name
  def region_name(new_value : String)
    @region_name = new_value
    self
  end

  # host.geo.region_iso_code
  #
  # Region ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA-QC
  # ```
  property region_iso_code : String?

  # A chainable setter for region_iso_code
  def region_iso_code(new_value : String)
    @region_iso_code = new_value
    self
  end

  # host.geo.name
  #
  # User-defined description of a location, at the level of granularity they care
  # about.
  #
  # Could be the name of their data centers, the floor number, if this describes a
  # local physical entity, city names.
  #
  # Not typically used in automated geolocation.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # boston-dc
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # host.geo.location
  #
  # Longitude and latitude.
  #
  # Level: Core
  # Type: GeoPoint
  # Example:
  # ```
  # { "lon": -73.614830, "lat": 45.505918 }
  # ```
  property location : String?

  # A chainable setter for location
  def location(new_value : String)
    @location = new_value
    self
  end

  # host.geo.country_name
  #
  # Country name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Canada
  # ```
  property country_name : String?

  # A chainable setter for country_name
  def country_name(new_value : String)
    @country_name = new_value
    self
  end

  # host.geo.country_iso_code
  #
  # Country ISO code.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # CA
  # ```
  property country_iso_code : String?

  # A chainable setter for country_iso_code
  def country_iso_code(new_value : String)
    @country_iso_code = new_value
    self
  end

  # host.geo.continent_name
  #
  # Name of the continent.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # North America
  # ```
  property continent_name : String?

  # A chainable setter for continent_name
  def continent_name(new_value : String)
    @continent_name = new_value
    self
  end

  # host.geo.city_name
  #
  # City name.
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Montreal
  # ```
  property city_name : String?

  # A chainable setter for city_name
  def city_name(new_value : String)
    @city_name = new_value
    self
  end
end

struct ECS::LogEntry::File


  property x509 : X509?

  # A chainable setter for x509
  def x509(value : X509)
    @x509 = value
    self
  end

  # Initialize a new X509, yield it to the block
  def x509
    @x509 = yield X509.new
    self
  end


end

struct ECS::LogEntry::File::X509
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.x509.not_before
  #
  # Time at which the certificate is first considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2019-08-16 01:40:25+00:00
  # ```
  property not_before : Time?

  # A chainable setter for not_before
  def not_before(new_value : Time)
    @not_before = new_value
    self
  end

  # file.x509.not_after
  #
  # Time at which the certificate is no longer considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2020-07-16 03:15:39+00:00
  # ```
  property not_after : Time?

  # A chainable setter for not_after
  def not_after(new_value : Time)
    @not_after = new_value
    self
  end

  # file.x509.alternative_names
  #
  # List of subject alternative names (SAN). Name types vary by certificate
  # authority and certificate type but commonly contain IP addresses, DNS names (and
  # wildcards), and email addresses.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # *.elastic.co
  # ```
  property alternative_names : String?

  # A chainable setter for alternative_names
  def alternative_names(new_value : String)
    @alternative_names = new_value
    self
  end

  # file.x509.public_key_algorithm
  #
  # Algorithm used to generate the public key.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # RSA
  # ```
  property public_key_algorithm : String?

  # A chainable setter for public_key_algorithm
  def public_key_algorithm(new_value : String)
    @public_key_algorithm = new_value
    self
  end

  # file.x509.public_key_curve
  #
  # The curve used by the elliptic curve public key algorithm. This is algorithm
  # specific.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # nistp521
  # ```
  property public_key_curve : String?

  # A chainable setter for public_key_curve
  def public_key_curve(new_value : String)
    @public_key_curve = new_value
    self
  end

  # file.x509.version_number
  #
  # Version of x509 format.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 3
  # ```
  property version_number : String?

  # A chainable setter for version_number
  def version_number(new_value : String)
    @version_number = new_value
    self
  end

  # file.x509.signature_algorithm
  #
  # Identifier for certificate signature algorithm. Recommend using names found in
  # Go Lang Crypto library (See
  # https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # SHA256-RSA
  # ```
  property signature_algorithm : String?

  # A chainable setter for signature_algorithm
  def signature_algorithm(new_value : String)
    @signature_algorithm = new_value
    self
  end

  # file.x509.serial_number
  #
  # Unique serial number issued by the certificate authority. For consistency, if
  # this value is alphanumeric, it should be formatted without colons and uppercase
  # characters.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 55FBB9C7DEBF09809D12CCAA
  # ```
  property serial_number : String?

  # A chainable setter for serial_number
  def serial_number(new_value : String)
    @serial_number = new_value
    self
  end

  # file.x509.public_key_size
  #
  # The size of the public key space in bits.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 2048
  # ```
  property public_key_size : UInt64?

  # A chainable setter for public_key_size
  def public_key_size(new_value : UInt64)
    @public_key_size = new_value
    self
  end

  # file.x509.public_key_exponent
  #
  # Exponent used to derive the public key. This is algorithm specific.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 65537
  # ```
  property public_key_exponent : UInt64?

  # A chainable setter for public_key_exponent
  def public_key_exponent(new_value : UInt64)
    @public_key_exponent = new_value
    self
  end
end

struct ECS::LogEntry::File


  property codesignature : CodeSignature?

  # A chainable setter for codesignature
  def codesignature(value : CodeSignature)
    @codesignature = value
    self
  end

  # Initialize a new CodeSignature, yield it to the block
  def codesignature
    @codesignature = yield CodeSignature.new
    self
  end


end

struct ECS::LogEntry::File::CodeSignature
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.code_signature.trusted
  #
  # Stores the trust status of the certificate chain.
  #
  # Validating the trust of the certificate chain may be complicated, and this field
  # should only be populated by tools that actively check the status.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property trusted : Bool?

  # A chainable setter for trusted
  def trusted(new_value : Bool)
    @trusted = new_value
    self
  end

  # file.code_signature.valid
  #
  # Boolean to capture if the digital signature is verified against the binary
  # content.
  #
  # Leave unpopulated if a certificate was unchecked.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property valid : Bool?

  # A chainable setter for valid
  def valid(new_value : Bool)
    @valid = new_value
    self
  end

  # file.code_signature.exists
  #
  # Boolean to capture if a signature is present.
  #
  # Level: Core
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property exists : Bool?

  # A chainable setter for exists
  def exists(new_value : Bool)
    @exists = new_value
    self
  end

  # file.code_signature.status
  #
  # Additional information about the certificate status.
  #
  # This is useful for logging cryptographic errors with the certificate validity or
  # trust status. Leave unpopulated if the validity or trust of the certificate was
  # unchecked.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ERROR_UNTRUSTED_ROOT
  # ```
  property status : String?

  # A chainable setter for status
  def status(new_value : String)
    @status = new_value
    self
  end

  # file.code_signature.subject_name
  #
  # Subject name of the code signer
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property subject_name : String?

  # A chainable setter for subject_name
  def subject_name(new_value : String)
    @subject_name = new_value
    self
  end
end

struct ECS::LogEntry::File


  property pe : Pe?

  # A chainable setter for pe
  def pe(value : Pe)
    @pe = value
    self
  end

  # Initialize a new Pe, yield it to the block
  def pe
    @pe = yield Pe.new
    self
  end


end

struct ECS::LogEntry::File::Pe
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.pe.product
  #
  # Internal product name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft® Windows® Operating System
  # ```
  property product : String?

  # A chainable setter for product
  def product(new_value : String)
    @product = new_value
    self
  end

  # file.pe.original_file_name
  #
  # Internal name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MSPAINT.EXE
  # ```
  property original_file_name : String?

  # A chainable setter for original_file_name
  def original_file_name(new_value : String)
    @original_file_name = new_value
    self
  end

  # file.pe.imphash
  #
  # A hash of the imports in a PE file. An imphash -- or import hash -- can be used
  # to fingerprint binaries even after recompilation or other code-level
  # transformations have occurred, which would change more traditional hash values.
  #
  # Learn more at
  # https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0c6803c4e922103c4dca5963aad36ddf
  # ```
  property imphash : String?

  # A chainable setter for imphash
  def imphash(new_value : String)
    @imphash = new_value
    self
  end

  # file.pe.file_version
  #
  # Internal version of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 6.3.9600.17415
  # ```
  property file_version : String?

  # A chainable setter for file_version
  def file_version(new_value : String)
    @file_version = new_value
    self
  end

  # file.pe.description
  #
  # Internal description of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Paint
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # file.pe.company
  #
  # Internal company name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property company : String?

  # A chainable setter for company
  def company(new_value : String)
    @company = new_value
    self
  end

  # file.pe.architecture
  #
  # CPU architecture target for the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # x64
  # ```
  property architecture : String?

  # A chainable setter for architecture
  def architecture(new_value : String)
    @architecture = new_value
    self
  end
end

struct ECS::LogEntry::Observer


  property os : Os?

  # A chainable setter for os
  def os(value : Os)
    @os = value
    self
  end

  # Initialize a new Os, yield it to the block
  def os
    @os = yield Os.new
    self
  end


end

struct ECS::LogEntry::Observer::Os
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.os.family
  #
  # OS family (such as redhat, debian, freebsd, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # debian
  # ```
  property family : String?

  # A chainable setter for family
  def family(new_value : String)
    @family = new_value
    self
  end

  # observer.os.full
  #
  # Operating system name, including the version or code name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS Mojave
  # ```
  property full : String?

  # A chainable setter for full
  def full(new_value : String)
    @full = new_value
    self
  end

  # observer.os.version
  #
  # Operating system version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10.14.1
  # ```
  property version : String?

  # A chainable setter for version
  def version(new_value : String)
    @version = new_value
    self
  end

  # observer.os.platform
  #
  # Operating system platform (such centos, ubuntu, windows).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # darwin
  # ```
  property platform : String?

  # A chainable setter for platform
  def platform(new_value : String)
    @platform = new_value
    self
  end

  # observer.os.name
  #
  # Operating system name, without the version.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mac OS X
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.os.kernel
  #
  # Operating system kernel version as a raw string.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 4.4.0-112-generic
  # ```
  property kernel : String?

  # A chainable setter for kernel
  def kernel(new_value : String)
    @kernel = new_value
    self
  end
end

struct ECS::LogEntry::Dns


  property answers : Answers?

  # A chainable setter for answers
  def answers(value : Answers)
    @answers = value
    self
  end

  # Initialize a new Answers, yield it to the block
  def answers
    @answers = yield Answers.new
    self
  end


end

struct ECS::LogEntry::Dns::Answers
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dns.answers.type
  #
  # The type of data contained in this resource record.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # CNAME
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # dns.answers.ttl
  #
  # The time interval in seconds that this resource record may be cached before it
  # should be discarded. Zero values mean that the data should not be cached.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 180
  # ```
  property ttl : UInt64?

  # A chainable setter for ttl
  def ttl(new_value : UInt64)
    @ttl = new_value
    self
  end

  # dns.answers.name
  #
  # The domain name to which this resource record pertains.
  #
  # If a chain of CNAME is being resolved, each answer's `name` should be the one
  # that corresponds with the answer's `data`. It should not simply be the original
  # `question.name` repeated.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.google.com
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # dns.answers.data
  #
  # The data describing the resource.
  #
  # The meaning of this data depends on the type and class of the resource record.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10.10.10.10
  # ```
  property data : String?

  # A chainable setter for data
  def data(new_value : String)
    @data = new_value
    self
  end

  # dns.answers.class
  #
  # The class of DNS data contained in this resource record.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # IN
  # ```
  property class : String?

  # A chainable setter for class
  def class(new_value : String)
    @class = new_value
    self
  end
end

struct ECS::LogEntry::Dll


  property pe : Pe?

  # A chainable setter for pe
  def pe(value : Pe)
    @pe = value
    self
  end

  # Initialize a new Pe, yield it to the block
  def pe
    @pe = yield Pe.new
    self
  end


end

struct ECS::LogEntry::Dll::Pe
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dll.pe.product
  #
  # Internal product name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft® Windows® Operating System
  # ```
  property product : String?

  # A chainable setter for product
  def product(new_value : String)
    @product = new_value
    self
  end

  # dll.pe.original_file_name
  #
  # Internal name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # MSPAINT.EXE
  # ```
  property original_file_name : String?

  # A chainable setter for original_file_name
  def original_file_name(new_value : String)
    @original_file_name = new_value
    self
  end

  # dll.pe.imphash
  #
  # A hash of the imports in a PE file. An imphash -- or import hash -- can be used
  # to fingerprint binaries even after recompilation or other code-level
  # transformations have occurred, which would change more traditional hash values.
  #
  # Learn more at
  # https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0c6803c4e922103c4dca5963aad36ddf
  # ```
  property imphash : String?

  # A chainable setter for imphash
  def imphash(new_value : String)
    @imphash = new_value
    self
  end

  # dll.pe.file_version
  #
  # Internal version of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 6.3.9600.17415
  # ```
  property file_version : String?

  # A chainable setter for file_version
  def file_version(new_value : String)
    @file_version = new_value
    self
  end

  # dll.pe.description
  #
  # Internal description of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Paint
  # ```
  property description : String?

  # A chainable setter for description
  def description(new_value : String)
    @description = new_value
    self
  end

  # dll.pe.company
  #
  # Internal company name of the file, provided at compile-time.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property company : String?

  # A chainable setter for company
  def company(new_value : String)
    @company = new_value
    self
  end

  # dll.pe.architecture
  #
  # CPU architecture target for the file.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # x64
  # ```
  property architecture : String?

  # A chainable setter for architecture
  def architecture(new_value : String)
    @architecture = new_value
    self
  end
end

struct ECS::LogEntry::Process


  property codesignature : CodeSignature?

  # A chainable setter for codesignature
  def codesignature(value : CodeSignature)
    @codesignature = value
    self
  end

  # Initialize a new CodeSignature, yield it to the block
  def codesignature
    @codesignature = yield CodeSignature.new
    self
  end


end

struct ECS::LogEntry::Process::CodeSignature
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.code_signature.valid
  #
  # Boolean to capture if the digital signature is verified against the binary
  # content.
  #
  # Leave unpopulated if a certificate was unchecked.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property valid : Bool?

  # A chainable setter for valid
  def valid(new_value : Bool)
    @valid = new_value
    self
  end

  # process.code_signature.exists
  #
  # Boolean to capture if a signature is present.
  #
  # Level: Core
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property exists : Bool?

  # A chainable setter for exists
  def exists(new_value : Bool)
    @exists = new_value
    self
  end

  # process.code_signature.status
  #
  # Additional information about the certificate status.
  #
  # This is useful for logging cryptographic errors with the certificate validity or
  # trust status. Leave unpopulated if the validity or trust of the certificate was
  # unchecked.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ERROR_UNTRUSTED_ROOT
  # ```
  property status : String?

  # A chainable setter for status
  def status(new_value : String)
    @status = new_value
    self
  end

  # process.code_signature.subject_name
  #
  # Subject name of the code signer
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property subject_name : String?

  # A chainable setter for subject_name
  def subject_name(new_value : String)
    @subject_name = new_value
    self
  end

  # process.code_signature.trusted
  #
  # Stores the trust status of the certificate chain.
  #
  # Validating the trust of the certificate chain may be complicated, and this field
  # should only be populated by tools that actively check the status.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property trusted : Bool?

  # A chainable setter for trusted
  def trusted(new_value : Bool)
    @trusted = new_value
    self
  end
end

struct ECS::LogEntry::Process


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::Process::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.hash.sha512
  #
  # SHA512 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha512 : String?

  # A chainable setter for sha512
  def sha512(new_value : String)
    @sha512 = new_value
    self
  end

  # process.hash.sha256
  #
  # SHA256 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end

  # process.hash.sha1
  #
  # SHA1 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end

  # process.hash.md5
  #
  # MD5 hash.
  #
  # Level: Extended
  # Type: Keyword
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end
end

struct ECS::LogEntry::Dns


  property question : Question?

  # A chainable setter for question
  def question(value : Question)
    @question = value
    self
  end

  # Initialize a new Question, yield it to the block
  def question
    @question = yield Question.new
    self
  end


end

struct ECS::LogEntry::Dns::Question
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # dns.question.top_level_domain
  #
  # The effective top level domain (eTLD), also known as the domain suffix, is the
  # last part of the domain name. For example, the top level domain for google.com is
  # "com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # label will not work well for effective TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # co.uk
  # ```
  property top_level_domain : String?

  # A chainable setter for top_level_domain
  def top_level_domain(new_value : String)
    @top_level_domain = new_value
    self
  end

  # dns.question.registered_domain
  #
  # The highest registered domain, stripped of the subdomain.
  #
  # For example, the registered domain for "foo.google.com" is "google.com".
  #
  # This value can be determined precisely with a list like the public suffix list
  # (http://publicsuffix.org). Trying to approximate this by simply taking the last
  # two labels will not work well for TLDs such as "co.uk".
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # google.com
  # ```
  property registered_domain : String?

  # A chainable setter for registered_domain
  def registered_domain(new_value : String)
    @registered_domain = new_value
    self
  end

  # dns.question.name
  #
  # The name being queried.
  #
  # If the name field contains non-printable characters (below 32 or above 126),
  # those characters should be represented as escaped base 10 integers (\DDD). Back
  # slashes and quotes should be escaped. Tabs, carriage returns, and line feeds
  # should be converted to \t, \r, and \n respectively.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.google.com
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # dns.question.type
  #
  # The type of record being queried.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # AAAA
  # ```
  property type : String?

  # A chainable setter for type
  def type(new_value : String)
    @type = new_value
    self
  end

  # dns.question.class
  #
  # The class of records being queried.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # IN
  # ```
  property class : String?

  # A chainable setter for class
  def class(new_value : String)
    @class = new_value
    self
  end

  # dns.question.subdomain
  #
  # The subdomain is all of the labels under the registered_domain.
  #
  # If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
  # the subdomain field should contain "sub2.sub1", with no trailing period.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www
  # ```
  property subdomain : String?

  # A chainable setter for subdomain
  def subdomain(new_value : String)
    @subdomain = new_value
    self
  end
end

struct ECS::LogEntry::Client::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Client::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # client.user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # client.user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Server


  property x509 : X509?

  # A chainable setter for x509
  def x509(value : X509)
    @x509 = value
    self
  end

  # Initialize a new X509, yield it to the block
  def x509
    @x509 = yield X509.new
    self
  end


end

struct ECS::LogEntry::Tls::Server::X509
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.server.x509.version_number
  #
  # Version of x509 format.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 3
  # ```
  property version_number : String?

  # A chainable setter for version_number
  def version_number(new_value : String)
    @version_number = new_value
    self
  end

  # tls.server.x509.signature_algorithm
  #
  # Identifier for certificate signature algorithm. Recommend using names found in
  # Go Lang Crypto library (See
  # https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # SHA256-RSA
  # ```
  property signature_algorithm : String?

  # A chainable setter for signature_algorithm
  def signature_algorithm(new_value : String)
    @signature_algorithm = new_value
    self
  end

  # tls.server.x509.serial_number
  #
  # Unique serial number issued by the certificate authority. For consistency, if
  # this value is alphanumeric, it should be formatted without colons and uppercase
  # characters.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 55FBB9C7DEBF09809D12CCAA
  # ```
  property serial_number : String?

  # A chainable setter for serial_number
  def serial_number(new_value : String)
    @serial_number = new_value
    self
  end

  # tls.server.x509.public_key_size
  #
  # The size of the public key space in bits.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 2048
  # ```
  property public_key_size : UInt64?

  # A chainable setter for public_key_size
  def public_key_size(new_value : UInt64)
    @public_key_size = new_value
    self
  end

  # tls.server.x509.public_key_exponent
  #
  # Exponent used to derive the public key. This is algorithm specific.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 65537
  # ```
  property public_key_exponent : UInt64?

  # A chainable setter for public_key_exponent
  def public_key_exponent(new_value : UInt64)
    @public_key_exponent = new_value
    self
  end

  # tls.server.x509.public_key_curve
  #
  # The curve used by the elliptic curve public key algorithm. This is algorithm
  # specific.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # nistp521
  # ```
  property public_key_curve : String?

  # A chainable setter for public_key_curve
  def public_key_curve(new_value : String)
    @public_key_curve = new_value
    self
  end

  # tls.server.x509.not_before
  #
  # Time at which the certificate is first considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2019-08-16 01:40:25+00:00
  # ```
  property not_before : Time?

  # A chainable setter for not_before
  def not_before(new_value : Time)
    @not_before = new_value
    self
  end

  # tls.server.x509.not_after
  #
  # Time at which the certificate is no longer considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2020-07-16 03:15:39+00:00
  # ```
  property not_after : Time?

  # A chainable setter for not_after
  def not_after(new_value : Time)
    @not_after = new_value
    self
  end

  # tls.server.x509.alternative_names
  #
  # List of subject alternative names (SAN). Name types vary by certificate
  # authority and certificate type but commonly contain IP addresses, DNS names (and
  # wildcards), and email addresses.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # *.elastic.co
  # ```
  property alternative_names : String?

  # A chainable setter for alternative_names
  def alternative_names(new_value : String)
    @alternative_names = new_value
    self
  end

  # tls.server.x509.public_key_algorithm
  #
  # Algorithm used to generate the public key.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # RSA
  # ```
  property public_key_algorithm : String?

  # A chainable setter for public_key_algorithm
  def public_key_algorithm(new_value : String)
    @public_key_algorithm = new_value
    self
  end
end

struct ECS::LogEntry::File::X509


  property issuer : Issuer?

  # A chainable setter for issuer
  def issuer(value : Issuer)
    @issuer = value
    self
  end

  # Initialize a new Issuer, yield it to the block
  def issuer
    @issuer = yield Issuer.new
    self
  end


end

struct ECS::LogEntry::File::X509::Issuer
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.x509.issuer.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end

  # file.x509.issuer.organizational_unit
  #
  # List of organizational units (OU) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.digicert.com
  # ```
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # file.x509.issuer.organization
  #
  # List of organizations (O) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert Inc
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # file.x509.issuer.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mountain View
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # file.x509.issuer.distinguished_name
  #
  # Distinguished name (DN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # file.x509.issuer.country
  #
  # List of country (C) codes
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end

  # file.x509.issuer.common_name
  #
  # List of common name (CN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert SHA2 High Assurance Server CA
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end
end

struct ECS::LogEntry::Process::Parent


  property thread : Thread?

  # A chainable setter for thread
  def thread(value : Thread)
    @thread = value
    self
  end

  # Initialize a new Thread, yield it to the block
  def thread
    @thread = yield Thread.new
    self
  end


end

struct ECS::LogEntry::Process::Parent::Thread
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.parent.thread.id
  #
  # Thread ID.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 4242
  # ```
  property id : UInt64?

  # A chainable setter for id
  def id(new_value : UInt64)
    @id = new_value
    self
  end

  # process.parent.thread.name
  #
  # Thread name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # thread-0
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Process::Parent


  property codesignature : CodeSignature?

  # A chainable setter for codesignature
  def codesignature(value : CodeSignature)
    @codesignature = value
    self
  end

  # Initialize a new CodeSignature, yield it to the block
  def codesignature
    @codesignature = yield CodeSignature.new
    self
  end


end

struct ECS::LogEntry::Process::Parent::CodeSignature
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.parent.code_signature.exists
  #
  # Boolean to capture if a signature is present.
  #
  # Level: Core
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property exists : Bool?

  # A chainable setter for exists
  def exists(new_value : Bool)
    @exists = new_value
    self
  end

  # process.parent.code_signature.valid
  #
  # Boolean to capture if the digital signature is verified against the binary
  # content.
  #
  # Leave unpopulated if a certificate was unchecked.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property valid : Bool?

  # A chainable setter for valid
  def valid(new_value : Bool)
    @valid = new_value
    self
  end

  # process.parent.code_signature.trusted
  #
  # Stores the trust status of the certificate chain.
  #
  # Validating the trust of the certificate chain may be complicated, and this field
  # should only be populated by tools that actively check the status.
  #
  # Level: Extended
  # Type: Boolean
  # Example:
  # ```
  # true
  # ```
  property trusted : Bool?

  # A chainable setter for trusted
  def trusted(new_value : Bool)
    @trusted = new_value
    self
  end

  # process.parent.code_signature.status
  #
  # Additional information about the certificate status.
  #
  # This is useful for logging cryptographic errors with the certificate validity or
  # trust status. Leave unpopulated if the validity or trust of the certificate was
  # unchecked.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # ERROR_UNTRUSTED_ROOT
  # ```
  property status : String?

  # A chainable setter for status
  def status(new_value : String)
    @status = new_value
    self
  end

  # process.parent.code_signature.subject_name
  #
  # Subject name of the code signer
  #
  # Level: Core
  # Type: Keyword
  # Example:
  # ```
  # Microsoft Corporation
  # ```
  property subject_name : String?

  # A chainable setter for subject_name
  def subject_name(new_value : String)
    @subject_name = new_value
    self
  end
end

struct ECS::LogEntry::Client::As


  property organization : Organization?

  # A chainable setter for organization
  def organization(value : Organization)
    @organization = value
    self
  end

  # Initialize a new Organization, yield it to the block
  def organization
    @organization = yield Organization.new
    self
  end


end

struct ECS::LogEntry::Client::As::Organization
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # client.as.organization.name
  #
  # Organization name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Google LLC
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Process::Parent


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::Process::Parent::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # process.parent.hash.md5
  #
  # MD5 hash.
  #
  # Level: Extended
  # Type: Keyword
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end

  # process.parent.hash.sha1
  #
  # SHA1 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end

  # process.parent.hash.sha256
  #
  # SHA256 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end

  # process.parent.hash.sha512
  #
  # SHA512 hash.
  #
  # Level: Extended
  # Type: Keyword
  property sha512 : String?

  # A chainable setter for sha512
  def sha512(new_value : String)
    @sha512 = new_value
    self
  end
end

struct ECS::LogEntry::Destination::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Destination::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # destination.user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # destination.user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end
end

struct ECS::LogEntry::File::X509


  property subject : Subject?

  # A chainable setter for subject
  def subject(value : Subject)
    @subject = value
    self
  end

  # Initialize a new Subject, yield it to the block
  def subject
    @subject = yield Subject.new
    self
  end


end

struct ECS::LogEntry::File::X509::Subject
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # file.x509.subject.common_name
  #
  # List of common names (CN) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # r2.shared.global.fastly.net
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end

  # file.x509.subject.country
  #
  # List of country (C) code
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end

  # file.x509.subject.distinguished_name
  #
  # Distinguished name (DN) of the certificate subject entity.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, ST=California, L=San Francisco, O=Fastly, Inc., CN=r2.shared.global.fastly.net
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # file.x509.subject.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # San Francisco
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # file.x509.subject.organization
  #
  # List of organizations (O) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Fastly, Inc.
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # file.x509.subject.organizational_unit
  #
  # List of organizational units (OU) of subject.
  #
  # Level: Extended
  # Type: Keyword
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # file.x509.subject.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Server


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::Tls::Server::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.server.hash.sha256
  #
  # Certificate fingerprint using the SHA256 digest of DER-encoded version of
  # certificate offered by the server. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
  # ```
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end

  # tls.server.hash.md5
  #
  # Certificate fingerprint using the MD5 digest of DER-encoded version of
  # certificate offered by the server. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
  # ```
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end

  # tls.server.hash.sha1
  #
  # Certificate fingerprint using the SHA1 digest of DER-encoded version of
  # certificate offered by the server. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 9E393D93138888D288266C2D915214D1D1CCEB2A
  # ```
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end
end

struct ECS::LogEntry::Source::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Source::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end

  # source.user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # source.user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Log::Syslog


  property facility : Facility?

  # A chainable setter for facility
  def facility(value : Facility)
    @facility = value
    self
  end

  # Initialize a new Facility, yield it to the block
  def facility
    @facility = yield Facility.new
    self
  end


end

struct ECS::LogEntry::Log::Syslog::Facility
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.syslog.facility.code
  #
  # The Syslog numeric facility of the log event, if available.
  #
  # According to RFCs 5424 and 3164, this value should be an integer between 0 and
  # 23.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 23
  # ```
  property code : UInt64?

  # A chainable setter for code
  def code(new_value : UInt64)
    @code = new_value
    self
  end

  # log.syslog.facility.name
  #
  # The Syslog text-based facility of the log event, if available.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # local7
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Log::Origin


  property file : File?

  # A chainable setter for file
  def file(value : File)
    @file = value
    self
  end

  # Initialize a new File, yield it to the block
  def file
    @file = yield File.new
    self
  end


end

struct ECS::LogEntry::Log::Origin::File
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.origin.file.name
  #
  # The name of the file containing the source code which originated the log event.
  #
  # Note that this field is not meant to capture the log file. The correct field to
  # capture the log file is `log.file.path`.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Bootstrap.java
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # log.origin.file.line
  #
  # The line number of the file containing the source code which originated the log
  # event.
  #
  # Level: Extended
  # Type: Integer
  # Example:
  # ```
  # 42
  # ```
  property line : Int64?

  # A chainable setter for line
  def line(new_value : Int64)
    @line = new_value
    self
  end
end

struct ECS::LogEntry::Http::Response


  property body : Body?

  # A chainable setter for body
  def body(value : Body)
    @body = value
    self
  end

  # Initialize a new Body, yield it to the block
  def body
    @body = yield Body.new
    self
  end


end

struct ECS::LogEntry::Http::Response::Body
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # http.response.body.content
  #
  # The full HTTP response body.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Hello world
  # ```
  property content : String?

  # A chainable setter for content
  def content(new_value : String)
    @content = new_value
    self
  end

  # http.response.body.bytes
  #
  # Size in bytes of the response body.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 887
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end
end

struct ECS::LogEntry::Http::Request


  property body : Body?

  # A chainable setter for body
  def body(value : Body)
    @body = value
    self
  end

  # Initialize a new Body, yield it to the block
  def body
    @body = yield Body.new
    self
  end


end

struct ECS::LogEntry::Http::Request::Body
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # http.request.body.content
  #
  # The full HTTP request body.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Hello world
  # ```
  property content : String?

  # A chainable setter for content
  def content(new_value : String)
    @content = new_value
    self
  end

  # http.request.body.bytes
  #
  # Size in bytes of the request body.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 887
  # ```
  property bytes : UInt64?

  # A chainable setter for bytes
  def bytes(new_value : UInt64)
    @bytes = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Client


  property hash : Hash?

  # A chainable setter for hash
  def hash(value : Hash)
    @hash = value
    self
  end

  # Initialize a new Hash, yield it to the block
  def hash
    @hash = yield Hash.new
    self
  end


end

struct ECS::LogEntry::Tls::Client::Hash
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.client.hash.md5
  #
  # Certificate fingerprint using the MD5 digest of DER-encoded version of
  # certificate offered by the client. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
  # ```
  property md5 : String?

  # A chainable setter for md5
  def md5(new_value : String)
    @md5 = new_value
    self
  end

  # tls.client.hash.sha1
  #
  # Certificate fingerprint using the SHA1 digest of DER-encoded version of
  # certificate offered by the client. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 9E393D93138888D288266C2D915214D1D1CCEB2A
  # ```
  property sha1 : String?

  # A chainable setter for sha1
  def sha1(new_value : String)
    @sha1 = new_value
    self
  end

  # tls.client.hash.sha256
  #
  # Certificate fingerprint using the SHA256 digest of DER-encoded version of
  # certificate offered by the client. For consistency with other hash values, this
  # value should be formatted as an uppercase hash.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
  # ```
  property sha256 : String?

  # A chainable setter for sha256
  def sha256(new_value : String)
    @sha256 = new_value
    self
  end
end

struct ECS::LogEntry::Host::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Host::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # host.user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # host.user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # host.user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Client


  property x509 : X509?

  # A chainable setter for x509
  def x509(value : X509)
    @x509 = value
    self
  end

  # Initialize a new X509, yield it to the block
  def x509
    @x509 = yield X509.new
    self
  end


end

struct ECS::LogEntry::Tls::Client::X509
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.client.x509.alternative_names
  #
  # List of subject alternative names (SAN). Name types vary by certificate
  # authority and certificate type but commonly contain IP addresses, DNS names (and
  # wildcards), and email addresses.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # *.elastic.co
  # ```
  property alternative_names : String?

  # A chainable setter for alternative_names
  def alternative_names(new_value : String)
    @alternative_names = new_value
    self
  end

  # tls.client.x509.signature_algorithm
  #
  # Identifier for certificate signature algorithm. Recommend using names found in
  # Go Lang Crypto library (See
  # https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # SHA256-RSA
  # ```
  property signature_algorithm : String?

  # A chainable setter for signature_algorithm
  def signature_algorithm(new_value : String)
    @signature_algorithm = new_value
    self
  end

  # tls.client.x509.serial_number
  #
  # Unique serial number issued by the certificate authority. For consistency, if
  # this value is alphanumeric, it should be formatted without colons and uppercase
  # characters.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 55FBB9C7DEBF09809D12CCAA
  # ```
  property serial_number : String?

  # A chainable setter for serial_number
  def serial_number(new_value : String)
    @serial_number = new_value
    self
  end

  # tls.client.x509.public_key_size
  #
  # The size of the public key space in bits.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 2048
  # ```
  property public_key_size : UInt64?

  # A chainable setter for public_key_size
  def public_key_size(new_value : UInt64)
    @public_key_size = new_value
    self
  end

  # tls.client.x509.public_key_exponent
  #
  # Exponent used to derive the public key. This is algorithm specific.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 65537
  # ```
  property public_key_exponent : UInt64?

  # A chainable setter for public_key_exponent
  def public_key_exponent(new_value : UInt64)
    @public_key_exponent = new_value
    self
  end

  # tls.client.x509.public_key_curve
  #
  # The curve used by the elliptic curve public key algorithm. This is algorithm
  # specific.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # nistp521
  # ```
  property public_key_curve : String?

  # A chainable setter for public_key_curve
  def public_key_curve(new_value : String)
    @public_key_curve = new_value
    self
  end

  # tls.client.x509.public_key_algorithm
  #
  # Algorithm used to generate the public key.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # RSA
  # ```
  property public_key_algorithm : String?

  # A chainable setter for public_key_algorithm
  def public_key_algorithm(new_value : String)
    @public_key_algorithm = new_value
    self
  end

  # tls.client.x509.not_before
  #
  # Time at which the certificate is first considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2019-08-16 01:40:25+00:00
  # ```
  property not_before : Time?

  # A chainable setter for not_before
  def not_before(new_value : Time)
    @not_before = new_value
    self
  end

  # tls.client.x509.not_after
  #
  # Time at which the certificate is no longer considered valid.
  #
  # Level: Extended
  # Type: Date
  # Example:
  # ```
  # 2020-07-16 03:15:39+00:00
  # ```
  property not_after : Time?

  # A chainable setter for not_after
  def not_after(new_value : Time)
    @not_after = new_value
    self
  end

  # tls.client.x509.version_number
  #
  # Version of x509 format.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 3
  # ```
  property version_number : String?

  # A chainable setter for version_number
  def version_number(new_value : String)
    @version_number = new_value
    self
  end
end

struct ECS::LogEntry::Log::Syslog


  property severity : Severity?

  # A chainable setter for severity
  def severity(value : Severity)
    @severity = value
    self
  end

  # Initialize a new Severity, yield it to the block
  def severity
    @severity = yield Severity.new
    self
  end


end

struct ECS::LogEntry::Log::Syslog::Severity
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # log.syslog.severity.code
  #
  # The Syslog numeric severity of the log event, if available.
  #
  # If the event source publishing via Syslog provides a different numeric severity
  # value (e.g. firewall, IDS), your source's numeric severity should go to
  # `event.severity`. If the event source does not specify a distinct severity, you
  # can optionally copy the Syslog severity to `event.severity`.
  #
  # Level: Extended
  # Type: Long
  # Example:
  # ```
  # 3
  # ```
  property code : UInt64?

  # A chainable setter for code
  def code(new_value : UInt64)
    @code = new_value
    self
  end

  # log.syslog.severity.name
  #
  # The Syslog numeric severity of the log event, if available.
  #
  # If the event source publishing via Syslog provides a different severity value
  # (e.g. firewall, IDS), your source's text severity should go to `log.level`. If
  # the event source does not specify a distinct severity, you can optionally copy
  # the Syslog severity to `log.level`.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Error
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Destination::As


  property organization : Organization?

  # A chainable setter for organization
  def organization(value : Organization)
    @organization = value
    self
  end

  # Initialize a new Organization, yield it to the block
  def organization
    @organization = yield Organization.new
    self
  end


end

struct ECS::LogEntry::Destination::As::Organization
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # destination.as.organization.name
  #
  # Organization name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Google LLC
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Observer::Ingress


  property vlan : Vlan?

  # A chainable setter for vlan
  def vlan(value : Vlan)
    @vlan = value
    self
  end

  # Initialize a new Vlan, yield it to the block
  def vlan
    @vlan = yield Vlan.new
    self
  end


end

struct ECS::LogEntry::Observer::Ingress::Vlan
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.ingress.vlan.id
  #
  # VLAN ID as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # observer.ingress.vlan.name
  #
  # Optional VLAN name as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Observer::Ingress


  property interface : Interface?

  # A chainable setter for interface
  def interface(value : Interface)
    @interface = value
    self
  end

  # Initialize a new Interface, yield it to the block
  def interface
    @interface = yield Interface.new
    self
  end


end

struct ECS::LogEntry::Observer::Ingress::Interface
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.ingress.interface.name
  #
  # Interface name as reported by the system.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # eth0
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.ingress.interface.id
  #
  # Interface ID as reported by an observer (typically SNMP interface ID).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # observer.ingress.interface.alias
  #
  # Interface alias as reported by the system, typically used in firewall
  # implementations for e.g. inside, outside, or dmz logical interface naming.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property alias : String?

  # A chainable setter for alias
  def alias(new_value : String)
    @alias = new_value
    self
  end
end

struct ECS::LogEntry::Source::As


  property organization : Organization?

  # A chainable setter for organization
  def organization(value : Organization)
    @organization = value
    self
  end

  # Initialize a new Organization, yield it to the block
  def organization
    @organization = yield Organization.new
    self
  end


end

struct ECS::LogEntry::Source::As::Organization
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # source.as.organization.name
  #
  # Organization name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Google LLC
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Server::User


  property group : Group?

  # A chainable setter for group
  def group(value : Group)
    @group = value
    self
  end

  # Initialize a new Group, yield it to the block
  def group
    @group = yield Group.new
    self
  end


end

struct ECS::LogEntry::Server::User::Group
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.user.group.name
  #
  # Name of the group.
  #
  # Level: Extended
  # Type: Keyword
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # server.user.group.id
  #
  # Unique identifier for the group on the system/platform.
  #
  # Level: Extended
  # Type: Keyword
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # server.user.group.domain
  #
  # Name of the directory the group is a member of.
  #
  # For example, an LDAP or Active Directory domain name.
  #
  # Level: Extended
  # Type: Keyword
  property domain : String?

  # A chainable setter for domain
  def domain(new_value : String)
    @domain = new_value
    self
  end
end

struct ECS::LogEntry::Observer::Egress


  property vlan : Vlan?

  # A chainable setter for vlan
  def vlan(value : Vlan)
    @vlan = value
    self
  end

  # Initialize a new Vlan, yield it to the block
  def vlan
    @vlan = yield Vlan.new
    self
  end


end

struct ECS::LogEntry::Observer::Egress::Vlan
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.egress.vlan.name
  #
  # Optional VLAN name as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.egress.vlan.id
  #
  # VLAN ID as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Observer::Egress


  property interface : Interface?

  # A chainable setter for interface
  def interface(value : Interface)
    @interface = value
    self
  end

  # Initialize a new Interface, yield it to the block
  def interface
    @interface = yield Interface.new
    self
  end


end

struct ECS::LogEntry::Observer::Egress::Interface
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # observer.egress.interface.name
  #
  # Interface name as reported by the system.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # eth0
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # observer.egress.interface.id
  #
  # Interface ID as reported by an observer (typically SNMP interface ID).
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end

  # observer.egress.interface.alias
  #
  # Interface alias as reported by the system, typically used in firewall
  # implementations for e.g. inside, outside, or dmz logical interface naming.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property alias : String?

  # A chainable setter for alias
  def alias(new_value : String)
    @alias = new_value
    self
  end
end

struct ECS::LogEntry::Network::Inner


  property vlan : Vlan?

  # A chainable setter for vlan
  def vlan(value : Vlan)
    @vlan = value
    self
  end

  # Initialize a new Vlan, yield it to the block
  def vlan
    @vlan = yield Vlan.new
    self
  end


end

struct ECS::LogEntry::Network::Inner::Vlan
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # network.inner.vlan.name
  #
  # Optional VLAN name as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # outside
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end

  # network.inner.vlan.id
  #
  # VLAN ID as reported by the observer.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # 10
  # ```
  property id : String?

  # A chainable setter for id
  def id(new_value : String)
    @id = new_value
    self
  end
end

struct ECS::LogEntry::Server::As


  property organization : Organization?

  # A chainable setter for organization
  def organization(value : Organization)
    @organization = value
    self
  end

  # Initialize a new Organization, yield it to the block
  def organization
    @organization = yield Organization.new
    self
  end


end

struct ECS::LogEntry::Server::As::Organization
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # server.as.organization.name
  #
  # Organization name.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Google LLC
  # ```
  property name : String?

  # A chainable setter for name
  def name(new_value : String)
    @name = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Client::X509


  property subject : Subject?

  # A chainable setter for subject
  def subject(value : Subject)
    @subject = value
    self
  end

  # Initialize a new Subject, yield it to the block
  def subject
    @subject = yield Subject.new
    self
  end


end

struct ECS::LogEntry::Tls::Client::X509::Subject
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.client.x509.subject.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end

  # tls.client.x509.subject.organizational_unit
  #
  # List of organizational units (OU) of subject.
  #
  # Level: Extended
  # Type: Keyword
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # tls.client.x509.subject.organization
  #
  # List of organizations (O) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Fastly, Inc.
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # tls.client.x509.subject.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # San Francisco
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # tls.client.x509.subject.distinguished_name
  #
  # Distinguished name (DN) of the certificate subject entity.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, ST=California, L=San Francisco, O=Fastly, Inc., CN=r2.shared.global.fastly.net
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # tls.client.x509.subject.common_name
  #
  # List of common names (CN) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # r2.shared.global.fastly.net
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end

  # tls.client.x509.subject.country
  #
  # List of country (C) code
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Server::X509


  property issuer : Issuer?

  # A chainable setter for issuer
  def issuer(value : Issuer)
    @issuer = value
    self
  end

  # Initialize a new Issuer, yield it to the block
  def issuer
    @issuer = yield Issuer.new
    self
  end


end

struct ECS::LogEntry::Tls::Server::X509::Issuer
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.server.x509.issuer.common_name
  #
  # List of common name (CN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert SHA2 High Assurance Server CA
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end

  # tls.server.x509.issuer.country
  #
  # List of country (C) codes
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end

  # tls.server.x509.issuer.distinguished_name
  #
  # Distinguished name (DN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # tls.server.x509.issuer.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mountain View
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # tls.server.x509.issuer.organization
  #
  # List of organizations (O) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert Inc
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # tls.server.x509.issuer.organizational_unit
  #
  # List of organizational units (OU) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.digicert.com
  # ```
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # tls.server.x509.issuer.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Client::X509


  property issuer : Issuer?

  # A chainable setter for issuer
  def issuer(value : Issuer)
    @issuer = value
    self
  end

  # Initialize a new Issuer, yield it to the block
  def issuer
    @issuer = yield Issuer.new
    self
  end


end

struct ECS::LogEntry::Tls::Client::X509::Issuer
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.client.x509.issuer.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Mountain View
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # tls.client.x509.issuer.common_name
  #
  # List of common name (CN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert SHA2 High Assurance Server CA
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end

  # tls.client.x509.issuer.organization
  #
  # List of organizations (O) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # DigiCert Inc
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # tls.client.x509.issuer.organizational_unit
  #
  # List of organizational units (OU) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # www.digicert.com
  # ```
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # tls.client.x509.issuer.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end

  # tls.client.x509.issuer.distinguished_name
  #
  # Distinguished name (DN) of issuing certificate authority.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert SHA2 High Assurance Server CA
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # tls.client.x509.issuer.country
  #
  # List of country (C) codes
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end
end

struct ECS::LogEntry::Tls::Server::X509


  property subject : Subject?

  # A chainable setter for subject
  def subject(value : Subject)
    @subject = value
    self
  end

  # Initialize a new Subject, yield it to the block
  def subject
    @subject = yield Subject.new
    self
  end


end

struct ECS::LogEntry::Tls::Server::X509::Subject
  include JSON::Serializable

  # Initialize all values as nil
  def initialize; end


  # tls.server.x509.subject.state_or_province
  #
  # List of state or province names (ST, S, or P)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # California
  # ```
  property state_or_province : String?

  # A chainable setter for state_or_province
  def state_or_province(new_value : String)
    @state_or_province = new_value
    self
  end

  # tls.server.x509.subject.organizational_unit
  #
  # List of organizational units (OU) of subject.
  #
  # Level: Extended
  # Type: Keyword
  property organizational_unit : String?

  # A chainable setter for organizational_unit
  def organizational_unit(new_value : String)
    @organizational_unit = new_value
    self
  end

  # tls.server.x509.subject.organization
  #
  # List of organizations (O) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # Fastly, Inc.
  # ```
  property organization : String?

  # A chainable setter for organization
  def organization(new_value : String)
    @organization = new_value
    self
  end

  # tls.server.x509.subject.locality
  #
  # List of locality names (L)
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # San Francisco
  # ```
  property locality : String?

  # A chainable setter for locality
  def locality(new_value : String)
    @locality = new_value
    self
  end

  # tls.server.x509.subject.distinguished_name
  #
  # Distinguished name (DN) of the certificate subject entity.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # C=US, ST=California, L=San Francisco, O=Fastly, Inc., CN=r2.shared.global.fastly.net
  # ```
  property distinguished_name : String?

  # A chainable setter for distinguished_name
  def distinguished_name(new_value : String)
    @distinguished_name = new_value
    self
  end

  # tls.server.x509.subject.country
  #
  # List of country (C) code
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # US
  # ```
  property country : String?

  # A chainable setter for country
  def country(new_value : String)
    @country = new_value
    self
  end

  # tls.server.x509.subject.common_name
  #
  # List of common names (CN) of subject.
  #
  # Level: Extended
  # Type: Keyword
  # Example:
  # ```
  # r2.shared.global.fastly.net
  # ```
  property common_name : String?

  # A chainable setter for common_name
  def common_name(new_value : String)
    @common_name = new_value
    self
  end
end
